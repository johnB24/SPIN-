set cut_paste_input [stack 0]
version 11.3 v4
push $cut_paste_input
Spill_Correct {
name Spill_Correct
selected true
xpos -1024
ypos -977
}
Matte_Position {
name Matte_Position
label " \[value matte_type] \[if \{\[value stack_alpha]\} then \{return \"| Stackable\"\} else \{return \"\"\}]"
selected true
xpos -1024
ypos -953
}
Noise_3D {
name Noise_3D
selected true
xpos -1024
ypos -917
}
Relight_Simple {
name Relight_Simple
selected true
xpos -1024
ypos -893
}
Group {
name ReProject_3D
help "This gizmo does camera projection using the STMap node to remap all the layers in the input image.  It uses a 3D render of point positions in world space (as output by Nuke's ScanlineRender node) and a 3D camera to create UV texture coordinates that are then used to warp an input image such as a matte painting.\n\nNOTE: The projection works best with unmatted input images or at least unpremulted matting with some coverage, then all masking occurs within the gizmo.\n\nIt can mask the projected image in the following ways:\n- Input alpha from the 3D render.\n- Projecting on surfaces facing camera, using normal (N) in world space. This means all surfaces facing the projecting camera will receive the projection regardless of whether they are blocked by other geometry. This is like Nuke's existing camera projection masking."
knobChanged "node = nuke.thisNode()\nknob = nuke.thisKnob()\ndef set_visible():\n    if knob.name() == \"motion_blur_check_box\":\n        node.knobs()\['motionblur_samples'].setVisible(knob.value())\n        node.knobs()\['shutterTime'].setVisible(knob.value())\n        node.knobs()\['resampleType'].setVisible(knob.value())\n        node.knobs()\['spacer'].setVisible(knob.value())\n    if knob.name() == \"front_face_check_box\":\n        node.knobs()\['shuffle_normals_bottom_a'].setVisible(knob.value())\n        node.knobs()\['front_face_bias'].setVisible(knob.value())\n        node.knobs()\['cull_softness_size'].setVisible(knob.value())\n        node.knobs()\['div05'].setVisible(knob.value())\n    if knob.name() == \"repo_pos_check_box\":\n        node.knobs()\['repo_translate'].setVisible(knob.value())\n        node.knobs()\['repo_rotate'].setVisible(knob.value())\n        node.knobs()\['repo_scale'].setVisible(knob.value())\n        node.knobs()\['repo_uniform_scale'].setVisible(knob.value())\n        node.knobs()\['spacer2'].setVisible(knob.value())\n    if knob.name() == \"tile_mirror_check_box\":\n        node.knobs()\['TileX'].setVisible(knob.value())\n        node.knobs()\['TileY'].setVisible(knob.value())\n        node.knobs()\['MirrorX'].setVisible(knob.value())\n        node.knobs()\['MirrorY'].setVisible(knob.value())\n        node.knobs()\['out_space'].setVisible(knob.value())\nset_visible()\n"
tile_color 0x94eafff
selected true
xpos -1024
ypos -869
addUserKnob {20 reproject_3d l "ReProject 3D"}
addUserKnob {26 top_div l " " T " "}
addUserKnob {26 txt_projection_settings l " " T "<span style='color:LightCyan'><b>Projection Settings"}
addUserKnob {4 switch_output l "              <span style='color:DimGrey'><i>Output  " t "\n<b>Final Image</b>\nSet to display the final output of projection.\n\n<b>Projection</b>\nSet to view projection over position pass.\n" M {"Final Image" Projection "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
addUserKnob {41 in l "       Position " t "\nChoose the position pass channel to be projected onto.\n\nNote :\nIf the object you are projecting onto is moving, use a tech pass that accounts for the position of the moving object, per frame.\n\n" -STARTLINE T shuffle_input_position.in}
addUserKnob {3 project_frame l "        Project Frame  " t "\nEnter the reference frame you want for the camera projection.\n"}
addUserKnob {22 setframe l " Current Frame " t "\nSet automatically the reference frame to the current frame.\n" -STARTLINE T nuke.thisNode().knob('project_frame').setValue(nuke.frame())}
addUserKnob {26 spacer05 l " " -STARTLINE T " "}
addUserKnob {6 freeze_image l "Freeze Source Image" t "\nHold to the same frame the input Image.\n" -STARTLINE}
addUserKnob {26 spacer06 l " " -STARTLINE T ""}
addUserKnob {6 crop l Crop t "\nCrop the incoming image, putting black outside the format area.\n" -STARTLINE}
addUserKnob {26 top_space l "" +STARTLINE T " "}
addUserKnob {26 txt_settings l " " T "<span style='color:LightCyan'><b>Position Quality Settings"}
addUserKnob {41 filter l "Image Filter" t "\nSets the filter type used by the STMap.\n" T map_set.filter}
addUserKnob {26 spacer14 l "" -STARTLINE T "     "}
addUserKnob {6 antialiasing l Antialiasing t "\nIncrease the size of the input position pass before the projection.\n" -STARTLINE}
addUserKnob {26 tech_alpha_spacer l "" -STARTLINE T "     "}
addUserKnob {6 mask_by_tech_alpha l "Use Tech Alpha" t "\nIf Alpha exists as a channel in the tech pass input, this will premult the position pass by that alpha.\n" -STARTLINE}
addUserKnob {7 image_bilateral_sampling l "Bilateral Sampling " t "\nSample type to attack edge artifacts on certain types of objects.\n" R 0 10}
addUserKnob {7 image_soft_sample l "   Soft Sample " t "\nSample type to attack edge artifacts on certain types of objects.\n" -STARTLINE R 0 5}
addUserKnob {26 div03 l " " T " "}
addUserKnob {26 txt_motion_blur l " " T "<span style='color:LightCyan'><b>Motion Blur "}
addUserKnob {6 motion_blur_check_box l Enable t "Enable Motion Blur" -STARTLINE}
addUserKnob {3 motionblur_samples l samples t "Increase samples for a smoother blur radius.\n" +HIDDEN}
motionblur_samples 1
addUserKnob {41 shutterTime l "shutter time" +HIDDEN T motion_blur.shutterTime}
addUserKnob {41 resampleType l sampling t "Pixel samples of the motion blur.\n" +HIDDEN T motion_blur.resampleType}
addUserKnob {26 spacer l " " +HIDDEN T " "}
addUserKnob {26 txt_front_face_projection l " " T "<span style='color:LightSlateGrey'><b>Subtract Back Facing  "}
addUserKnob {6 front_face_check_box l Enable t "\nEnable back face subtraction\n" -STARTLINE}
addUserKnob {41 shuffle_normals_bottom_a l "Normals " t "\nNormals are used to remove the back facing projection.\n" +HIDDEN T shuffle_input_normals.in}
addUserKnob {7 front_face_bias l "Bias " t "Adjusts the amount of visible surface normals." +HIDDEN R 1 2}
front_face_bias 1
addUserKnob {7 cull_softness_size l "   Softness " t "Softens the result." -STARTLINE +HIDDEN R 0 5}
addUserKnob {26 div05 l " " +HIDDEN T " "}
addUserKnob {26 txt_repo_transform l " " T "<span style='color:LightSlateGrey'><b>RePosition Projection  "}
addUserKnob {6 repo_pos_check_box l " Enable" -STARTLINE}
addUserKnob {13 repo_translate l "translate " +HIDDEN}
addUserKnob {13 repo_rotate l "rotate " +HIDDEN}
addUserKnob {13 repo_scale l "scale " +HIDDEN}
repo_scale {1 1 1}
addUserKnob {7 repo_uniform_scale l "uniform scale  " +HIDDEN}
repo_uniform_scale 1
addUserKnob {26 spacer2 l "" +STARTLINE +HIDDEN T " "}
addUserKnob {26 txt_UV_tile l " " T "<span style='color:LightSlateGrey'><b>Tile / Mirror UV  "}
addUserKnob {6 tile_mirror_check_box l " Enable" -STARTLINE}
addUserKnob {41 TileX l "Tile X" +HIDDEN T position_tile.TileX}
addUserKnob {41 MirrorX l "Mirror X" -STARTLINE +HIDDEN T position_tile.MirrorX}
addUserKnob {41 TileY l "Tile Y" +HIDDEN T position_tile.TileY}
addUserKnob {41 MirrorY l "Mirror Y" -STARTLINE +HIDDEN T position_tile.MirrorY}
addUserKnob {26 out_space l " " +HIDDEN T " "}
addUserKnob {26 ""}
addUserKnob {26 spin_copyright l "  " t "\nÂ© <b>SPIN<span style=\"color:#b32026\">VFX</span></b>\nReProject_3D\nVersion 2.3\n2020" -STARTLINE T "<span style=\"color:#aaa;font-family:sans-serif;font-size:8pt\"><b>SPIN<span style=\"color:#b32026\">VFX</span></b> - Version 2.3 - 2020</a></span>"}
}
BackdropNode {
inputs 0
name Backdrop_inputs
tile_color 0x7f7f66ff
label <center>inputs
note_font_size 40
xpos -509
ypos -749
bdwidth 702
bdheight 203
}
BackdropNode {
inputs 0
name kbd7117
tile_color 0x625b575a
label "Front\nFacing"
note_font_size 40
xpos -477
ypos 37
bdwidth 178
bdheight 627
}
Input {
inputs 0
name InputPosition
label "\[value number]"
xpos -260
ypos -650
number 1
}
Dot {
name Dot2
tile_color 0xcccccc00
xpos -226
ypos -239
}
set N22343d10 [stack 0]
Dot {
name Dot7
tile_color 0xcccccc00
xpos -58
ypos -237
}
set N223817e0 [stack 0]
Dot {
name Dot3
tile_color 0xcccccc00
xpos 136
ypos -237
}
set N20fc1730 [stack 0]
Dot {
name Dot1
tile_color 0xcccccc00
xpos 288
ypos -237
}
Crop {
box {0 0 {input.width} {input.height}}
softness {{format.pixel_aspect}}
name Crop1
xpos 254
ypos -173
}
Input {
inputs 0
name InputCamera
label "\[value number]\nexists \[value check_input]"
xpos -124
ypos -648
number 2
addUserKnob {20 settings}
addUserKnob {6 check_input +STARTLINE}
check_input {{"\[exists parent.input2]"}}
}
Axis2 {
inputs 0
display off
selectable false
translate {{parent.repo_translate.x} {parent.repo_translate.y} {parent.repo_translate.z}}
rotate {{-parent.repo_rotate.x} {-parent.repo_rotate.y} {-parent.repo_rotate.z}}
scaling {{parent.repo_scale.x} {parent.repo_scale.y} {parent.repo_scale.z}}
uniform_scale {{parent.repo_uniform_scale}}
name repo_transform
xpos -140
ypos -471
disable {{1-repo_pos_check_box}}
}
set N20660710 [stack 0]
Camera2 {
display off
selectable false
useMatrix true
matrix {
    {{"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"} {"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"} {"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"} {"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"}}
    {{"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"} {"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"} {"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"} {"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"}}
    {{"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"} {"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"} {"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"} {"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"}}
    {{"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"} {"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"} {"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"} {"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].world_matrix(parent.project_frame)\} else \{return default_cam.world_matrix(parent.project_frame)\}]"}}
  }
focal {{"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].focal(parent.project_frame)\} else \{return \[value default_cam.focal]\}]"}}
haperture {{"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].haperture(parent.project_frame)\} else \{return \[value default_cam.haperture]\}]"}}
vaperture {{"\[if \{\[exists parent.input2]\} \{return \[topnode parent.input2].vaperture(parent.project_frame)\} else \{return \[value default_cam.vaperture]\}]"}}
name Proj_Cam
xpos -145
ypos -338
disable {{"1-\[exists parent.input2]"}}
}
push $N20660710
Camera {
name default_cam
xpos -40
ypos -349
}
Input {
inputs 0
name InputNormals
label "\[value number]"
xpos -442
ypos -649
number 3
}
Dot {
name dot_normal
xpos -408
ypos -435
}
Shuffle {
in none
alpha blue
name shuffle_input_normals
xpos -442
ypos -101
}
Dot {
name Dot15
tile_color 0xcccccc00
xpos -408
ypos -23
}
Remove {
operation keep
channels rgba
name keep_rgba
xpos -442
ypos 202
}
ColorMatrix {
matrix {
    {{Proj_Cam.world_matrix.0} {Proj_Cam.world_matrix.1} {Proj_Cam.world_matrix.2}}
    {{Proj_Cam.world_matrix.4} {Proj_Cam.world_matrix.5} {Proj_Cam.world_matrix.6}}
    {{Proj_Cam.world_matrix.8} {Proj_Cam.world_matrix.9} {Proj_Cam.world_matrix.10}}
  }
invert true
name front_face_ColorMatrix
xpos -442
ypos 271
disable {{"1-\[exists parent.input2]" x1833 1}}
}
Multiply {
channels {-rgba.red -rgba.green rgba.blue none}
value -1
name reverse_z
xpos -442
ypos 338
}
Expression {
expr0 clamp(-b)
expr1 0
expr2 0
name clamp_b_inv
xpos -442
ypos 407
}
Grade {
add {{"1-\[knob front_face_bias]"}}
black_clamp false
name cull_offset
xpos -442
ypos 465
}
Reformat {
type scale
scale {{parent.Reformat5.scale}}
pbb {{parent.Reformat5.pbb}}
name Reformat1
xpos -442
ypos 528
disable {{!parent.antialiasing}}
}
Expression {
channel0 rgba
expr0 "step(0, r)"
channel1 {-rgba.red -rgba.green -rgba.blue none}
channel2 {-rgba.red -rgba.green -rgba.blue none}
channel3 {none none none -rgba.alpha}
name cull_backfaces
xpos -442
ypos 588
}
Blur {
channels rgba
size {{"\[knob cull_softness_size]"}}
name cull_softness
label "size \[value size]"
xpos -442
ypos 732
}
set N1f858660 [stack 0]
Dot {
name Dot13
tile_color 0xcccccc00
xpos -85
ypos 741
}
push $N20fc1730
Shuffle {
in none
alpha black
name shuffle_input_position
xpos 102
ypos -174
}
Remove {
operation keep
channels rgba
name Remove2
xpos 102
ypos -102
}
Dot {
name Dot16
tile_color 0xcccccc00
xpos 136
ypos -24
}
set N20ca4e80 [stack 0]
Dot {
name Dot17
tile_color 0xcccccc00
xpos 15
ypos -24
}
Dot {
name Dot11
tile_color 0xcccccc00
xpos 15
ypos 1291
}
push $N1f858660
Reformat {
type scale
scale {{1/parent.Reformat5.scale}}
pbb true
name Reformat8
xpos -442
ypos 903
disable {{!parent.antialiasing}}
}
set C2052d0f0 [stack 0]
Remove {
operation keep
channels rgba
name clean_chan
xpos -442
ypos 1068
}
Dot {
name Dot14
tile_color 0xcccccc00
xpos -408
ypos 1219
}
push $N223817e0
NoOp {
name AlphaCheck
xpos -92
ypos -178
addUserKnob {20 User}
addUserKnob {6 alpha +STARTLINE}
alpha {{"\[python \"len(\\\[n for n in nuke.channels(nuke.thisNode().input(0)) if n.find(\\\".a\\\") != -1])>0\"]"}}
}
Dot {
name Dot4
tile_color 0xcccccc00
xpos -58
ypos 51
}
set N21e52780 [stack 0]
Dot {
name Dot9
tile_color 0xcccccc00
xpos -58
ypos 966
}
push $N21e52780
push $N20ca4e80
Copy {
inputs 2
from0 rgba.alpha
to0 rgba.alpha
name Copy1
xpos 102
ypos 42
}
Reformat {
type scale
scale 2
pbb true
name Reformat5
xpos 102
ypos 134
disable {{!parent.antialiasing x1833 0}}
}
Expression {
expr0 "(r - Proj_Cam.world_matrix.3)"
expr1 "(g - Proj_Cam.world_matrix.7)"
expr2 "(b - Proj_Cam.world_matrix.11)"
name Distance
xpos 102
ypos 205
disable {{"1-\[exists parent.input2]" x1833 0}}
}
Expression {
temp_name0 x
temp_expr0 "Proj_Cam.world_matrix.0 * r + Proj_Cam.world_matrix.4 * g + Proj_Cam.world_matrix.8 * b"
temp_name1 y
temp_expr1 "Proj_Cam.world_matrix.1 * r + Proj_Cam.world_matrix.5 * g + Proj_Cam.world_matrix.9 * b"
temp_name2 z
temp_expr2 "Proj_Cam.world_matrix.2 * r + Proj_Cam.world_matrix.6 * g + Proj_Cam.world_matrix.10 * b"
expr0 x
expr1 y
expr2 z
name Transform
xpos 102
ypos 276
disable {{"1-\[exists parent.input2]"}}
}
set N1f5072e0 [stack 0]
Expression {
temp_name0 ratio
temp_expr0 1
temp_name1 focal
temp_expr1 Proj_Cam.focal
temp_name2 u
temp_expr2 "0.5 + (r * ((focal/(Proj_Cam.haperture))/b)) * -1"
temp_name3 v
temp_expr3 "0.5 + (g * ((focal/(Proj_Cam.vaperture * ratio))/b)) * -1"
expr0 "u>0 && u<1 && v>0 && v<1 ? u : 0"
expr1 "v>0 && v<1 && u>0 && u<1 ? v : 0"
channel2 none
channel3 none
name Solve
label ratio=1/pixel_aspect
xpos 102
ypos 333
disable {{"1-\[exists parent.input2]"}}
}
push $N1f5072e0
Dot {
name Dot5
tile_color 0xcccccc00
xpos 287
ypos 279
}
Expression {
temp_name0 ratio
temp_expr0 1
temp_name1 focal
temp_expr1 Proj_Cam.focal
temp_name2 u
temp_expr2 "0.5 + (r * ((focal/(Proj_Cam.haperture))/b)) * -1"
temp_name3 v
temp_expr3 "0.5 + (g * ((focal/(Proj_Cam.vaperture * ratio))/b)) * -1"
expr0 u
expr1 v
channel2 none
channel3 none
name Solve_Crop
xpos 253
ypos 410
disable {{"1-\[exists parent.input2]"}}
}
Dissolve {
inputs 2
which {{parent.crop}}
name which_crop
xpos 102
ypos 404
}
Expression {
expr0 "TileX ? ( MirrorX ? ((abs(fmod(r, 2)) > 1) ? (1 - abs(fmod(r,1))) : abs(fmod(r,1))) :  abs(fmod(r, 1)) ) : r"
expr1 "TileY ? (MirrorY ? ((abs(fmod(g, 2)) > 1) ? (1 - abs(fmod(g,1))) : abs(fmod(g,1))) :  abs(fmod(g, 1)) ) : g"
name position_tile
xpos 102
ypos 484
disable {{1-tile_mirror_check_box}}
addUserKnob {20 settings l setting}
addUserKnob {6 TileX +STARTLINE}
addUserKnob {6 MirrorX -STARTLINE}
addUserKnob {6 TileY +STARTLINE}
addUserKnob {6 MirrorY -STARTLINE}
}
Bilateral {
Size {{image_bilateral_sampling}}
PositionalSigma 2
ColorSigma 2
name image_bilateral
xpos 102
ypos 535
}
Blur {
channels rgb
size {{image_soft_sample}}
name image_blur
label "size \[value size]"
xpos 102
ypos 592
}
Input {
inputs 0
name InputImage
label "\[value number]\nexists \[value check_input]"
xpos 26
ypos -649
addUserKnob {20 settings}
addUserKnob {6 check_input +STARTLINE}
check_input {{"\[exists parent.input0]"}}
}
Dot {
name Dot8
tile_color 0xcccccc00
xpos 60
ypos -305
}
Dot {
name Dot10
tile_color 0xcccccc00
xpos 441
ypos -305
}
FrameHold {
first_frame {{parent.project_frame x1060 1060}}
name FrameHold1
xpos 407
ypos 54
disable {{!parent.freeze_image}}
}
Log2Lin {
operation lin2log
name Log2Lin1
xpos 407
ypos 125
icon F_iconstart.png
}
Reformat {
type "to box"
box_width {{parent.Crop1.box.r}}
box_height {{parent.Crop1.box.t}}
box_fixed true
box_pixel_aspect {{parent.Crop1.softness}}
resize none
center false
pbb true
name Reformat2
xpos 407
ypos 175
}
Reformat {
type scale
scale {{parent.Reformat5.scale}}
pbb {{parent.Reformat5.pbb}}
name Reformat7
xpos 407
ypos 260
disable {{!parent.antialiasing}}
}
Remove {
operation keep
channels rgba
name Remove6
xpos 407
ypos 347
}
BlackOutside {
name BlackOutside1
xpos 407
ypos 411
}
Dot {
name Dot12
tile_color 0xcccccc00
xpos 441
ypos 693
}
STMap {
inputs 2
channels rgba
uv rgb
blur_scale 0
maskChannel -rgba.alpha
name map_set
xpos 102
ypos 690
}
Log2Lin {
name Log2Lin2
xpos 102
ypos 750
icon F_iconend.png
}
Clamp {
maximum 1001
name Clamp1
xpos 102
ypos 813
}
clone $C2052d0f0 {
xpos 102
ypos 902
selected false
}
Merge2 {
inputs 2
operation mask
bbox A
name Merge1
xpos 102
ypos 963
disable {{1-parent.mask_by_tech_alpha}}
}
MotionBlur {
shutterSamples {{motionblur_samples*4}}
shutterTime 0.5
motionEstimation Regularized
name motion_blur
xpos 102
ypos 1060
disable {{"1-\[knob motion_blur_check_box]"}}
}
Dot {
name Dot6
tile_color 0xcccccc00
xpos 136
ypos 1147
}
push $N22343d10
Remove {
operation keep
channels rgba
name Remove4
xpos -260
ypos -101
}
Copy {
inputs 2
channels rgba
bbox B
name copy_rgba
xpos -260
ypos 1132
}
Merge2 {
inputs 2
operation multiply
bbox B
name normals_multiply
xpos -260
ypos 1216
disable {{"1-\[knob front_face_check_box]"}}
}
Clamp {
channels alpha
name out_clamp
xpos -260
ypos 1282
}
set N2162f380 [stack 0]
PositionToPoints2 {
inputs 3
display textured
render_mode textured
pointSize 1
name points_data_out
xpos -119
ypos 1288
disable {{"switch_output==0 ? 1:0"}}
}
push 0
ScanlineRender {
inputs 2
conservative_shader_sampling false
transparency false
ztest_enabled false
shutteroffset centred
motion_vectors_type off
MB_channel none
drop_zero_alpha_samples false
name ren_ptp
xpos -119
ypos 1371
disable {{"switch_output==0 ? 1:0"}}
}
push $N2162f380
Merge2 {
inputs 2
bbox B
Achannels none
Bchannels none
output none
name mer_ptp
xpos -260
ypos 1367
disable {{"switch_output==0 ? 1:0"}}
}
Output {
name Output
xpos -260
ypos 1478
}
end_group
Match_Black_White {
name Match_Black_White1
selected true
xpos -1024
ypos -845
unpremult none
}
Group {
name Suppress_RGBCMY
help "Suppress specific colors in RGBCMY space"
selected true
xpos -1024
ypos -821
addUserKnob {20 colorSuppress l "Color Suppression"}
addUserKnob {7 red l Red t "Suppress this color"}
red 1
addUserKnob {18 red_luma l "Red Luma" t "Restore the luma of this color.\nCan be used to introduce other colors as well."}
red_luma 1
addUserKnob {6 red_luma_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 red_luma_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {26 ""}
addUserKnob {7 green l Green t "Suppress this color"}
green 1
addUserKnob {18 green_luma l "Green Luma" t "Restore the luma of this color.\nCan be used to introduce other colors as well."}
green_luma 1
addUserKnob {6 green_luma_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 green_luma_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {26 ""}
addUserKnob {7 blue l Blue t "Suppress this color"}
blue 1
addUserKnob {18 blue_luma l "Blue Luma" t "Restore the luma of this color.\nCan be used to introduce other colors as well."}
blue_luma 1
addUserKnob {6 blue_luma_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 blue_luma_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {26 ""}
addUserKnob {7 cyan l Cyan t "Suppress this color"}
cyan 1
addUserKnob {18 cyan_luma l "Cyan Luma" t "Restore the luma of this color.\nCan be used to introduce other colors as well."}
cyan_luma 1
addUserKnob {6 cyan_luma_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 cyan_luma_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {26 ""}
addUserKnob {7 magenta l Magenta t "Suppress this color"}
magenta 1
addUserKnob {18 magenta_luma l "Magenta Luma" t "Restore the luma of this color.\nCan be used to introduce other colors as well."}
magenta_luma 1
addUserKnob {6 magenta_luma_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 magenta_luma_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {26 ""}
addUserKnob {7 yellow l Yellow t "Suppress this color"}
yellow 1
addUserKnob {18 yellow_luma l "Yellow Luma" t "Restore the luma of this color.\nCan be used to introduce other colors as well."}
yellow_luma 1
addUserKnob {6 yellow_luma_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 yellow_luma_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {26 ""}
addUserKnob {26 spin_copyright l "" t "Â© <b>SPIN<span style=\"color:#b32026\">VFX</span></b>\nSuppress_RGBCMY\nVersion 1.2\n2017-2018\nhttps://wiki.spinvfx.com/xwiki/bin/view/Departments/Compositing%20Department/Nuke%20tools/Suppress_RGBCMY" +STARTLINE T "<span style=\"color:#aaa;font-family:sans-serif;font-size:8pt\"><b>SPIN<span style=\"color:#b32026\">VFX</span></b> - Version 1.2 - 2017-2018 - <a href=\"https://wiki.spinvfx.com/xwiki/bin/view/Departments/Compositing%20Department/Nuke%20tools/Suppress_RGBCMY\" style=\"color:#aaa\">Wiki Page</a></span>"}
}
Input {
inputs 0
name img
xpos -389
ypos -272
}
Dot {
name Dot7
xpos -355
ypos -137
}
set N21c5b1f0 [stack 0]
Dot {
name Dot3
xpos -106
ypos -137
}
Dot {
name Dot8
xpos -106
ypos 11
}
set N1f4d8710 [stack 0]
Dot {
name Dot1
xpos -106
ypos 211
}
set N2144ad70 [stack 0]
Dot {
name Dot6
xpos -106
ypos 399
}
set N22868e10 [stack 0]
Dot {
name Dot5
xpos -106
ypos 585
}
set N21ec8a50 [stack 0]
Dot {
name Dot4
xpos -106
ypos 783
}
set N1fff9550 [stack 0]
Dot {
name Dot2
xpos -106
ypos 989
}
Expression {
temp_name0 yel
temp_expr0 "max(min(r-b, g-b),0)"
expr0 yel
expr1 yel
expr2 0
name Yellow
xpos -258
ypos 985
}
set N1ff4e6a0 [stack 0]
Saturation {
saturation {{parent.yellow}}
name Saturation6
xpos -258
ypos 1038
}
Clamp {
maximum_enable false
name Clamp_negatif5
xpos -258
ypos 1076
}
Multiply {
value {{parent.yellow_luma} {parent.yellow_luma} {parent.yellow_luma} {parent.yellow_luma}}
name Multiply6
xpos -258
ypos 1114
}
push $N1ff4e6a0
push $N1fff9550
Expression {
temp_name0 mag
temp_expr0 "max(min(r-g, b-g),0)"
expr0 mag
expr1 0
expr2 mag
name Magenta
xpos -258
ypos 779
}
set N218bbaa0 [stack 0]
Saturation {
saturation {{parent.magenta}}
name Saturation5
xpos -258
ypos 820
}
Clamp {
maximum_enable false
name Clamp_negatif4
xpos -258
ypos 858
}
Multiply {
value {{parent.magenta_luma} {parent.magenta_luma} {parent.magenta_luma} {parent.magenta_luma}}
name Multiply5
xpos -258
ypos 896
}
push $N218bbaa0
push $N21ec8a50
Expression {
temp_name0 cyan
temp_expr0 "max(min(g-r, b-r),0)"
expr0 0
expr1 cyan
expr2 cyan
name Cyan
xpos -258
ypos 581
}
set N207f4760 [stack 0]
Saturation {
saturation {{parent.cyan}}
name Saturation4
xpos -258
ypos 622
}
Clamp {
maximum_enable false
name Clamp_negatif3
xpos -258
ypos 660
}
Multiply {
value {{parent.cyan_luma} {parent.cyan_luma} {parent.cyan_luma} {parent.cyan_luma}}
name Multiply4
xpos -258
ypos 698
}
push $N207f4760
push $N22868e10
Expression {
expr0 0
expr1 0
expr2 b-min(max(g,r),b)
name Blue
xpos -258
ypos 395
}
set N2254a5d0 [stack 0]
Saturation {
saturation {{parent.blue}}
name Saturation3
xpos -258
ypos 436
}
Clamp {
maximum_enable false
name Clamp_negatif2
xpos -258
ypos 474
}
Multiply {
value {{parent.blue_luma} {parent.blue_luma} {parent.blue_luma} {parent.blue_luma}}
name Multiply3
xpos -258
ypos 512
}
push $N2254a5d0
push $N2144ad70
Expression {
expr0 0
expr1 g-min(max(r,b),g)
expr2 0
name Green
xpos -258
ypos 207
}
set N21df1e20 [stack 0]
Saturation {
saturation {{parent.green}}
name Saturation2
xpos -258
ypos 248
}
Clamp {
maximum_enable false
name Clamp_negatif1
xpos -258
ypos 286
}
Multiply {
value {{parent.green_luma} {parent.green_luma} {parent.green_luma} {parent.green_luma}}
name Multiply2
xpos -258
ypos 324
}
push $N21df1e20
push $N1f4d8710
Expression {
expr0 r-min(max(g,b),r)
expr1 0
expr2 0
name Red
xpos -257
ypos 7
}
set N1ff4c480 [stack 0]
Saturation {
saturation {{parent.red}}
name Saturation1
xpos -257
ypos 45
}
Clamp {
maximum_enable false
name Clamp_negatif
xpos -257
ypos 86
}
Multiply {
value {{parent.red_luma} {parent.red_luma} {parent.red_luma} {parent.red_luma}}
name Multiply1
xpos -257
ypos 146
}
push $N1ff4c480
push $N21c5b1f0
Merge2 {
inputs 2
operation from
output rgb
name Merge1
xpos -389
ypos 7
}
Merge2 {
inputs 2
operation plus
output rgb
name redLuma
xpos -389
ypos 152
}
Merge2 {
inputs 2
operation from
output rgb
name Merge2
xpos -389
ypos 207
}
Merge2 {
inputs 2
operation plus
output rgb
name greenLuma
xpos -389
ypos 330
}
Merge2 {
inputs 2
operation from
output rgb
name Merge3
xpos -389
ypos 395
}
Merge2 {
inputs 2
operation plus
output rgb
name blueLuma
xpos -389
ypos 518
}
Merge2 {
inputs 2
operation from
output rgb
name Merge4
xpos -389
ypos 581
}
Merge2 {
inputs 2
operation plus
output rgb
name CyanLuma
xpos -389
ypos 704
}
Merge2 {
inputs 2
operation from
output rgb
name Merge5
xpos -389
ypos 779
}
Merge2 {
inputs 2
operation plus
output rgb
name magentaLuma
xpos -389
ypos 902
}
Merge2 {
inputs 2
operation from
output rgb
name Merge6
xpos -389
ypos 985
}
Merge2 {
inputs 2
operation plus
output rgb
name yellowLuma
xpos -389
ypos 1120
}
Output {
name Output2
xpos -389
ypos 1205
}
end_group
Grain_Advanced {
name Grain_Advanced1
selected true
xpos -1024
ypos -797
}
Lightwrap_Exponential {
name Lightwrap_Exponential1
selected true
xpos -1024
ypos -773
}
Morph_Dissolve {
name Morph_Dissolve2
label "(Plate \[value morph])"
selected true
xpos -1024
ypos -749
}
ZDefocus_Physical {
name ZDefocus_Physical1
selected true
xpos -1024
ypos -713
channels all
z_channel depth.Z
alpha rgba.alpha
filter_channel rgba.alpha
}
Chromatik {
name Chromatik
selected true
xpos -1024
ypos -677
center {320 240}
}
Glow_Exponential {
name Glow_Exponential
selected true
xpos -1024
ypos -653
}
Edge_Expand {
name Edge_Expand
label "(\[value method])"
selected true
xpos -1024
ypos -629
}
Erode_Fine {
name Erode_Fine
label "\[value size]"
selected true
xpos -1024
ypos -593
channels all
maskChannelMask none
}
push $cut_paste_input
Group {
name CardToTrack
onCreate "#nuke.thisNode()\['picker'].setValue(\[nuke.toNode(\"root\")\['format'].value().width()/2,nuke.toNode(\"root\")\['format'].value().height()/2])"
knobChanged "nn = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn == \"extraStuff\":\n    \n    if nn\['extraHelper'].value() in \[0,1,2,5]:\n        nn\[\"setGroup\"].clearFlag(1)\n        nn\['findZ'].setFlag(1)\n        nn\[\"happyGroup\"].setFlag(1)\n        nn\[\"goGroup\"].setFlag(1)\n        nn\[\"Zfind\"].setValue(0)\n        nn\['translate'].setValue(0)\n        nn\['rotate'].setValue(0)\n        nn\['scaling'].setValue(0)\n    elif nn\['extraHelper'].value() in \[3,4]:\n        nn\[\"setGroup\"].setFlag(1)\n        nn\['findZ'].setFlag(1)\n        nn\[\"happyGroup\"].setFlag(1)\n        nn\[\"goGroup\"].clearFlag(1)\n        nn\[\"Zfind\"].setValue(0)\n    \n    \n    \n"
tile_color 0x5236ff
gl_color 0xff0000ff
note_font "DejaVu Sans"
note_font_size 14
note_font_color 0xff
selected true
xpos -1179
ypos -751
addUserKnob {20 User l CardToTrack}
addUserKnob {22 python_button l "consolidate translations if you have few axises" t "If you have few Axises contributing to position of your card you will have to consolidate their position first.\n\n1 connect last Axis to Extra connection of the CardToTrack Gizmo\n\n2 Execute this button\n\n3 Use generated card \n\ncheers" +INVISIBLE T "import math\nimport nuke\naxisNode = nuke.thisGroup().input(2)\nnuke.thisGroup().end()\nm = nuke.math.Matrix4()\n\nn = nuke.createNode(\"Card2\")\nn\['scaling'].setExpression('curve')\nn\['rotate'].setExpression('curve')\nn\['translate'].setExpression('curve')\nn\['name'].setValue(\"consolidate of \"+axisNode.name())\n\nfirst_frame_v = nuke.root()\['first_frame'].value()\nlast_frame_v = nuke.root()\['last_frame'].value()\n\nscale_anim = n\['scaling'].animations()\nrotate_anim = n\['rotate'].animations()\ntranslate_anim = n\['translate'].animations()\n\nfor i in range(int(first_frame_v), int(last_frame_v+1)):\n\n    k = axisNode\['world_matrix']\n    k_time_aware = axisNode\['world_matrix'].getValueAt(i)\n\n\n    for y in range(k.height()):\n        for x in range(k.width()):\n            m\[x+(y*k.width())] = k_time_aware\[y + k.width()*x]\n\n\n        transM =nuke.math.Matrix4(m)\n        transM.translationOnly()\n        rotM = nuke.math.Matrix4(m)\n        rotM.rotationOnly()\n        scaleM = nuke.math.Matrix4(m)\n        scaleM.scaleOnly()\n\n        scale = (scaleM.xAxis().x, scaleM.yAxis().y, scaleM.zAxis().z)\n\n        rot = rotM.rotationsZXY()\n        rotDegrees = ( math.degrees(rot\[0]), math.degrees(rot\[1]), math.degrees(rot\[2]) )\n\n\n        trans = (transM\[12], transM\[13], transM\[14])\n\n        for s in range(3):\n            scale_anim\[s].setKey(i, scale\[s])\n            rotate_anim\[s].setKey(i, rotDegrees\[s])\n            translate_anim\[s].setKey(i, trans\[s])" +STARTLINE}
addUserKnob {26 ""}
addUserKnob {26 extras l "" t "here you can choose the way you would like find your position\n\n1 I have a Camera and great Matchmove\n   means you have only a tracked Camera - you will have to go normal way in finding position\n\n2  I have a Camera and Geometry\n   see little input called \"Extra\"? this is your new friend, if you have by any chance a geometry of the Scene - can be a model, lidar scan or just a bunch Nuke objects, connect it to the \"Extra\" input and press \"Set\" button, congrats you found your 3D position and ready sdjust your perspective(no need to bother with \"Z\" and \"Happy\" button\n\n3  I have a Camera and Wpos pass\n    if your nice 3D Artist rendered for you a Wpos pass, connect it to the \"Extra\" input and press \"Set\" button, congrats you found your 3D position and ready sdjust your perspective(no need to bother with \"Z\" and \"Happy\" button\n\n4  I have a Camera and Card\n    Let say you have animated Card and you want to translate it's position to Screen space, connect the Card to the .... guess what and press \"GO\" button\n    DONE!!!\n5  Axis \n    In Case you have card which animation is driven by one ore more Axises you can use this option. Just connect the Extra pipe to the lowest Axis in the chain. the script will consolidate transformations for you!\n\n" +STARTLINE T "I have a Camera and"}
addUserKnob {4 extraStuff l "" t "here you can choose the way you would like find your position\n\n1 I have a Camera and great Matchmove\n   means you have only a tracked Camera - you will have to go normal way in finding position\n\n2  I have a Camera and Geometry\n   see little input called \"Extra\"? this is your new friend, if you have by any chance a geometry of the Scene - can be a model, lidar scan or just a bunch Nuke objects, connect it to the \"Extra\" input and press \"Set\" button, congrats you found your 3D position and ready sdjust your perspective(no need to bother with \"Z\" and \"Happy\" button\n\n3  I have a Camera and Wpos pass\n    if your nice 3D Artist rendered for you a Wpos pass, connect it to the \"Extra\" input and press \"Set\" button, congrats you found your 3D position and ready sdjust your perspective(no need to bother with \"Z\" and \"Happy\" button\n\n4  I have a Camera and Card\n    Let say you have animated Card and you want to translate it's position to Screen space,\n     connect the Card to the .... \n    Adjust rotation/position/scaling  in the Card it self if needed\n     and press \"GO\" button\n    DONE!!!\n\n5 I have a Camera and an Axis\n    In some cases you have to use multiple Axises to refine position of your card.\n    This option will consolidate transformations stored in Axises.\n    Adjust rotation/position/scaling  in the Axis it self if needed\n    Connect the last (lowest) axis to Extra pipe and press GO button\n\n6 Use this one in case you have deep image." -STARTLINE M {"great match move!!!" Geometry "Wpos pass" Card Axis Deep "" "" "" "" "" "" "" "" ""}}
addUserKnob {3 extraHelper l INVISIBLE -STARTLINE +INVISIBLE}
extraHelper {{"\[numvalue extraStuff]"}}
addUserKnob {3 scene l "      scene size" t "the tool does not know how big your scene is, if after adjusting \"Z\" slider you see that the card you generating is too big or too small - adjust the scene size.\n\nyou not going to see something changing till you will press \"Set\" button again\n\nif you do happy you can leave this knob alone there will be no need to touch it again\n\njust remember the value so you will be able to enter it when you will be work on the other shots from the same sequence\n\ncheers!" -STARTLINE}
scene 10
addUserKnob {41 hue_rotation l "hue grid" -STARTLINE T HueShift1.hue_rotation}
addUserKnob {7 op l "     opacity grid" -STARTLINE}
op 1
addUserKnob {26 ""}
addUserKnob {20 setGroup l "set Reference" n 1}
addUserKnob {26 ds l <b>1. t "first step in finding desired position.\n\nplease find some feature on the screen, feature you can see on the other frames as well.\nnot position the picker on this feature and press \"Set\" button\n\nthe reference frame is set, yo should see now the grid centering on the \"picker\"\n\nthere is a chance that \"grid\" will be very small or very big depends on the size of your scene, feel free to adjust it's size with the u_scale knob.\n\nnow you ready for the next step" T "Set reference frame."}
addUserKnob {22 REF l Set t "first step in finding desired position.\n\nplease find some feature on the screen, feature you can see on the other frames as well.\nnot position the picker on this feature and press \"Set\" button\n\nthe reference frame is set, yo should see now the grid centering on the \"picker\"\n\nthere is a chance that \"grid\" will be very small or very big depends on the size of your scene, feel free to adjust it's size with the u_scale knob.\n\nnow you ready for the next step" T "n = nuke.thisGroup()\nn.begin()\nnuke.toNode(\"Switch1\")\['disable'].setValue(0)\nnuke.toNode(\"ScanlineRender1\")\['disable'].setValue(0)\nnuke.toNode(\"StabFrameHold\")\['first_frame'].setValue(n\['refFrame'].value())\n\nif n\['S'].value() == 1:\n\tn\['Stabilize'].execute()\n        n = a.input(1) \nss = n.input(1)\nn.end()       \ntopnode_name = nuke.tcl(\"full_name \[topnode %s]\" % ss.name()) \ncam = nuke.toNode(topnode_name)\ncam\['near'].clearAnimated()\ncam\['far'].clearAnimated()\ncam\['near'].setValue(0.01)\ncam\['far'].setValue(10000)\n\n\nss=n\['scene'].value()\n\nn.begin()\n\nnuke.toNode(\"NoOp1\")\['pick'].execute()\nn\['refFrame'].setValue(nuke.frame())\nnuke.toNode(\"Switch\")\['which'].setValue(0)\n\nr=nuke.toNode(\"Perspective\")\nr.setSelected(False)\nr.hideControlPanel()\nr\['rotate'].setValue(0)\nr\['translate'].setValue(0)\nr\['scaling'].setValue(1)\nr\['uniform_scale'].setValue(ss)\nn.end()\n    \nif n\['extraHelper'].value() in \[0,1,2]:\n    #n\['Adjust'].execute()\n    n\['findZ'].clearFlag(1)\n    #n\['setGroup'].setFlag(1)\n    n\['happyGroup'].setFlag(1)\n    n\['goGroup'].setFlag(1)\nif n\['extraHelper'].value() in \[1,2,5]:\n    n\['Adjust'].execute()\n\n    \n    \n" +STARTLINE}
addUserKnob {6 S l INVISIBLE -STARTLINE +INVISIBLE}
addUserKnob {3 refFrame l "   reference frame:" -STARTLINE +INVISIBLE}
refFrame 1001
addUserKnob {41 picker l "     " -STARTLINE T NoOp1.picker}
addUserKnob {20 endGroup_3 l endGroup n -1}
addUserKnob {26 ""}
addUserKnob {20 findZ l "Find Z" n 1}
findZ 0
addUserKnob {26 d l "<b>2. " t "Second step help us to find exact position in 3d space\n\nstart advance few frames, you should see that a grid is not fixed anymore to your reference feature, from the moment you noticing it is happening adjust \"Z\" knob to bring the \"grid\" back to the place it was. already after first adjustment you will see that grid is sticking well to the feature. Now you can go to some other frame and refine the position again if needed\n\nTipp:\nit is possible that already after one or two frames of advancement your grid will disappear it can happen because of the size of your scene. just play with \"Z\" slider till you will bring the \"grid\" back to the screen. it is possible that you will have to go to negative values as well." T "go to some other frame and adjust Z. Use stabilize if needed."}
addUserKnob {22 Stabilize -STARTLINE T "\n\n\nnode = nuke.thisNode() \nt = node\['S']\n\nif t.value() == 0:\n   nuke.thisKnob().setLabel('<font color=\"Red\"><b>Stabilized')\n   t.setValue(1)\n   nuke.toNode(\"StabFrameHold\")\['disable'].setValue(0)\n   nuke.toNode(\"StabFrameHold\")\['first_frame'].setValue(node\['refFrame'].value())\n   nuke.toNode(\"StabSwitch\")\['disable'].setValue(0)\nelse:\n   nuke.thisKnob().setLabel('Stabilize')\n   t.setValue(0)\n   nuke.toNode(\"StabFrameHold\")\['disable'].setValue(1)\n   nuke.toNode(\"StabSwitch\")\['disable'].setValue(1)"}
addUserKnob {7 Zfind l Z t "Second step help us to find exact position in 3d space\n\nstart advance few frames, you should see that a grid is not fixed anymore to your reference feature, from the moment you noticing it is happening adjust \"Z\" knob to bring the \"grid\" back to the place it was. already after first adjustment you will see that grid is sticking well to the feature. Now you can go to some other frame and refine the position again if needed.\nonce you happy with the result\npress \"Happy\" button!!!\n\nTipp:\nit is possible that already after one or two frames of advancement your grid will disappear it can happen because of the size of your scene. just play with \"Z\" slider till you will bring the \"grid\" back to the screen. it is possible that you will have to go to negative values as well." R -100 100}
addUserKnob {26 s l <b>3. t "this will create an axis in exact 3D position you found\nplease adjust (if needed)\nrotation of the card to match exact perspective you want\n\nTipp :\nadjusting \"scale\" and \"u_scale\":\nbe carefull when scaling up the card!!! from the moment one of the corners of the \"grid\" is passing the origin of the Camera the calculation will fail. So as a good practice leave your \"grid\" not too big it will not matter for final calculation since it still will lay on the same plane.\n\n" T "Happy with Z? Press \"Happy\" button and adjust perspective."}
addUserKnob {22 Adjust l Happy!!! t "this will create an axis in exact 3D position you found\nplease adjust (if needed)\nrotation of the card to match exact perspective you want\n\nTipp :\nadjusting \"scale\" and \"u_scale\":\nbe carefull when scaling up the card!!! from the moment one of the corners of the \"grid\" is passing the origin of the Camera the calculation will fail. So as a good practice leave your \"grid\" not too big it will not matter for final calculation since it still will lay on the same plane.\n\n" T "\n\ndef consolidateAnimatedNodeTransforms():\n    # This is based on Ivan B's consolidateNodeTransforms().\n    # Added support for animated Axis/Camera nodes. Also, if it's\n    # a Camera being concatenated, then projection settings get copied.\n    # -Ean C 24/Feb/2011\n    import math\n    import nuke\n    axisNode = nuke.toNode('Z_finder')\n    m = nuke.math.Matrix4()\n\n    nuke.toNode(\"Switch\")\['which'].setValue(1)\n    n = nuke.toNode('Perspective')\n    n\['scaling'].setExpression('curve')\n    n\['rotate'].setExpression('curve')\n    n\['translate'].setExpression('curve')\n\n    first_frame_v = nuke.root()\['first_frame'].value()\n    last_frame_v = nuke.root()\['last_frame'].value()\n    scale_anim = n\['scaling'].animations()\n    rotate_anim = n\['rotate'].animations()\n    translate_anim = n\['translate'].animations()\n\n    for i in range(int(first_frame_v), int(last_frame_v+1)):\n        k = axisNode\['world_matrix']\n        k_time_aware = axisNode\['world_matrix'].getValueAt(i)\n        for y in range(k.height()):\n            for x in range(k.width()):\n                m\[x+(y*k.width())] = k_time_aware\[y + k.width()*x]\n            transM =nuke.math.Matrix4(m)\n            transM.translationOnly()\n            rotM = nuke.math.Matrix4(m)\n            rotM.rotationOnly()\n            scaleM = nuke.math.Matrix4(m)\n            scaleM.scaleOnly()\n            scale = (scaleM.xAxis().x, scaleM.yAxis().y, scaleM.zAxis().z)\n            rot = rotM.rotationsZXY()\n            rotDegrees = ( math.degrees(rot\[0]), math.degrees(rot\[1]), math.degrees(rot\[2]) )\n            trans = (transM\[12], transM\[13], transM\[14])\n\n            for s in range(3):\n                scale_anim\[s].setKey(i, scale\[s])\n                rotate_anim\[s].setKey(i, rotDegrees\[s])\n                translate_anim\[s].setKey(i, trans\[s])\n    n\['translate'].clearAnimated()\n    n\['rotate'].clearAnimated()\n    n\['scaling'].clearAnimated()\n    n\['uniform_scale'].setValue(nuke.toNode(\"Card1\")\['uniform_scale'].value())\n    #nuke.show((n), True)\n    n.setSelected(True)\n    r=nuke.toNode(\"look_at_Axis\")\n    r.setSelected(False)\n    r.hideControlPanel()\t\t\t\nconsolidateAnimatedNodeTransforms()\n\na=nuke.thisNode()\nif a\['S'].value() == 1:\n    a\['Stabilize'].execute()\n\nn=a\nif n\['extraHelper'].value() in \[0,1,2,5]:\n    n\['findZ'].setFlag(1)\n    n\['happyGroup'].clearFlag(1)\n    n\['goGroup'].clearFlag(1)" +STARTLINE}
addUserKnob {20 endGroup n -1}
addUserKnob {26 ""}
addUserKnob {20 happyGroup l "Adjust TRS" n 1}
happyGroup 0
addUserKnob {41 translate T Perspective.translate}
addUserKnob {41 rotate l "rotate    " T Perspective.rotate}
addUserKnob {41 scaling l "scale     " T Perspective.scaling}
addUserKnob {41 uniform_scale l "u_scale " T Perspective.uniform_scale}
addUserKnob {20 endGroup_1 l endGroup n -1}
addUserKnob {26 ""}
addUserKnob {20 goGroup l "Create Nodes" n 1}
goGroup 0
addUserKnob {26 r l <b>4. t "this little fellow will create for you three nodes\n\n1. CProject - basically it is a cornerPin node with steroids it allowes to you very easy set Reference point for your \"projection\", stabilize, crop. all in one\n2. CornerPin with a transformation baked in the \"matrix\" knob - usually i am using it to copy to GridWarp or SplineWarp\n3. Roto - the node i am using the most.\nthe transformation is baked into the root matrix.\nso just pick the frame create the rotoshape and enjoy!" T "Time to create our Nodes!"}
addUserKnob {22 C2T l <b>-----------------------GO!----------------------- t "this little fellow will create for you three nodes\n\n1. CProject - basically it is a cornerPin node with steroids it allowes to you very easy set Reference point for your \"projection\", stabilize, crop. all in one\n2. CornerPin with a transformation baked in the \"matrix\" knob - usually i am using it to copy to GridWarp or SplineWarp\n3. Roto - the node i am using the most.\nthe transformation is baked into the root matrix.\nso just pick the frame create the rotoshape and enjoy!" T "\naxisCase = 0\na=nuke.thisNode()\nC2Tgroup = nuke.thisNode()\ntry:\n    n = a.input(1)\n    topnode_name = nuke.tcl(\"full_name \[topnode %s]\" % n.name()) \n    topnode = nuke.toNode(topnode_name)\n    #print topnode\['name'].value()\n    n = topnode\n    f=\[]\n    l=\[]\n    tr = n\['translate'].getKeyList()\n    first_frame_v = min(tr)\n    last_frame_v = max(tr)\nexcept:\n    pass\n\n\n\nif a\['S'].value() == 1:   \n    a\['Stabilize'].execute()\n\na.begin()\nx=int(a\['xpos'].value())\ny=int(a\['ypos'].value())\np = nuke.toNode(\"Perspective\")\nt=p\['translate'].value()\nr=p\['rotate'].value()\ns=p\['scaling'].value()\nus=p\['uniform_scale'].value()\nnuke.toNode(\"Switch\")\['which'].setValue(1)\na.end()\n\n\nfor node in nuke.allNodes():\n    node.setSelected(False)\na.input(1).setSelected(True)\na.input(0).setSelected(True)\n\n#Card case\nif a\['extraHelper'].value()==3:\n    crd = a.input(2)\n    crd.setSelected(True)\n    crd.setXYpos(x,y+50)\n    axisCase = 2\n    \n#Axises case\nelif a\['extraHelper'].value()==4:\n    axisCase = 1\n    #a.input(2).setSelected(True)\n\n\n    import math\n    import nuke\n    \n    axisNode = a.input(2)\n\n    \n    nuke.thisGroup().end()\n    m = nuke.math.Matrix4()\n    \n    n = nuke.nodes.Card2()\n    n\['scaling'].setExpression('curve')\n    n\['rotate'].setExpression('curve')\n    n\['translate'].setExpression('curve')\n    n\['name'].setValue(\"consolidate of \"+axisNode.name())\n    n\['xpos'].setValue(int(x))\n    n\['ypos'].setValue(int(y+50))\n    \n\n    \n    scale_anim = n\['scaling'].animations()\n    rotate_anim = n\['rotate'].animations()\n    translate_anim = n\['translate'].animations()\n    \n    for i in range(int(first_frame_v), int(last_frame_v+1)):\n    \n        k = axisNode\['world_matrix']\n        k_time_aware = axisNode\['world_matrix'].getValueAt(i)\n    \n    \n        for y in range(k.height()):\n            for x in range(k.width()):\n                m\[x+(y*k.width())] = k_time_aware\[y + k.width()*x]\n    \n    \n            transM =nuke.math.Matrix4(m)\n            transM.translationOnly()\n            rotM = nuke.math.Matrix4(m)\n            rotM.rotationOnly()\n            scaleM = nuke.math.Matrix4(m)\n            scaleM.scaleOnly()\n    \n            scale = (scaleM.xAxis().x, scaleM.yAxis().y, scaleM.zAxis().z)\n    \n            rot = rotM.rotationsZXY()\n            rotDegrees = ( math.degrees(rot\[0]), math.degrees(rot\[1]), math.degrees(rot\[2]) )\n    \n    \n            trans = (transM\[12], transM\[13], transM\[14])\n    \n            for s in range(3):\n                scale_anim\[s].setKey(i, scale\[s])\n                rotate_anim\[s].setKey(i, rotDegrees\[s])\n                translate_anim\[s].setKey(i, trans\[s])\n    \n    a.input(1).setSelected(True)\n    a.input(0).setSelected(True) \n    n.setSelected(True)\n    a.setInput(2,n)\n            \n#Deep input case         \n#elif a\['extraHelper'].value()==5: \n\nelse:\n    n = nuke.nodes.Card2()\n    n.setXYpos(x,y+100)\n    n\['translate'].setValue(t)\n    n\['rotate'].setValue(r)\n    n\['scaling'].setValue(s)\n    n\['uniform_scale'].setValue(us)\n    n.setSelected(True)\n\nwith nuke.Root():\n    #C2T new\n    import thread, threading, time, nuke, math, nukescripts\n\n    def execRC(first,last):\n        runMe = True\n        while runMe == True:\n            nuke.execute('r1',first,last)  \n            nuke.execute('r2',first,last) \n            nuke.execute('r3',first,last) \n            nuke.execute('r4',first,last) \n            stop_event.set()\n            runMe = False\n            #print 'reconcile done'\n            break\n\n    def getCamera():\n        n = a.input(1) \n        topnode_name = nuke.tcl(\"full_name \[topnode %s]\" % n.name()) \n        topnode = nuke.toNode(topnode_name)\n        #print topnode\['name'].value()\n        cam = topnode\n        #cam = a.input(1)\n        return cam\n\n\n\n    def BGdetect():\n        for n in nuke.selectedNodes():\n            #if 'format' in n.knobs():\n            if 'xform_order' not in n.knobs():\n                Name = n.name()\n                Width = n.width()\n                Height = n.height()\n                Aspect = n.pixelAspect()\n                form = str(Width)+\" \"+str(Height)+\" \"+str(Aspect)\n                #print 'format selected:'+\" \"+form\n                \n                bg = nuke.nodes.Constant(postage_stamp = False)\n                bg\['format'].setValue(nuke.addFormat(form))\n                return bg\n        #no format found ...\n        \n        #bg = nuke.createNode('Constant')\n        #bg = nuke.nodes.Constant(postage_stamp = False)\n        #return bg\n            \n    def C2T(dialog):\n\n\n        #card\n        card = None\n        for n in nuke.selectedNodes():\n            if \"Card\" in n.Class() or \"Axis\" in n.Class():\n                card = n\n                break\n        if card == None:\n            nuke.message('no card selected?')\n            return\n\n\n            \n            \n        # initialize tool values for auto-creation\n        label = card\['label'].value()\n        ref = int(nuke.frame())\n        first = first_frame_v\n        last = last_frame_v\n        bg = BGdetect() \n        cam = getCamera()\n        rootAspect = nuke.Root()\['format'].value().pixelAspect()\n        x = card.xpos() \n        y = card.ypos()\n        \n        bg.setXYpos(x,y+50)\n        \n        if dialog == True:\n            # ask for tool values\n            \n            # all cams\n            \n\n            \n            #bg, info only. will be determined by selected node - if any ..\n\n            #formatPrint = form\n\n            #panel\n            panel = nuke.Panel(\"C2T\")\n            panel.addSingleLineInput(\"label:\", card\['label'].value())\n            panel.addSingleLineInput(\"firstFrame:\", str(first))\n            panel.addSingleLineInput(\"lastFrame:\", str(last))\n            panel.addSingleLineInput(\"ref frame:\", str(ref))\n            #panel.addEnumerationPulldown(\"camera:\", camListPrint)\n            #panel.addSingleLineInput(\"format:\", formatPrint)\n            # if label == '':\n            #     panel.addBooleanCheckBox('reverse label', True)\n                \n            #panel.show()\n            \n            if panel.show():\n                first = int(panel.value(\"firstFrame:\"))\n                last = int(panel.value(\"lastFrame:\"))\n                ref = int(panel.value(\"ref frame:\"))\n                #cam = nuke.toNode(panel.value(\"camera:\"))\n                label = panel.value(\"label:\")\n\n            else:\n                nuke.message('canceled')\n                nuke.delete(bg) # clean the mess up\n                return\n        else:\n            print 'no dialog, use auto-created input values'\n        \n\n        # print '########'\n        # print 'first', first\n        # print 'last', last\n        # print 'ref', ref\n        # #print 'bg', form\n        # print 'cam', cam.name()\n        # print 'card', card.name()\n        # print 'label', label\n        # print '########' \n        \n        # create master axis and corner slaves\n        \n        aM = nuke.nodes.Axis2(name = 'aM', xform_order = 3, xpos = x, ypos = y+50)\n        uscale = card\['uniform_scale'].value()\n        scalex = card\['scaling'].value(0)\n        scaley = card\['scaling'].value(1)\n        \n        if card\['translate'].isAnimated() is True:\n            aM\['translate'].copyAnimations(card\['translate'].animations())\n        else:\n            aM\['translate'].setValue(card\['translate'].value())\n        \n        if card\['rotate'].isAnimated() is True:\n            aM\['rotate'].copyAnimations(card\['rotate'].animations())\n        else:\n            aM\['rotate'].setValue(card\['rotate'].value())\n            \n            \n        # slaves\n        a1 = nuke.nodes.Axis2(name = 'a1', xform_order = 1, xpos = x, ypos = y+50)\n        a2 = nuke.nodes.Axis2(name = 'a2', xform_order = 1, xpos = x, ypos = y+50)\n        a3 = nuke.nodes.Axis2(name = 'a3', xform_order = 1, xpos = x, ypos = y+50)\n        a4 = nuke.nodes.Axis2(name = 'a4', xform_order = 1, xpos = x, ypos = y+50)\n        \n        a1\['translate'].setValue(\[-0.5*uscale*scalex,rootAspect*-0.5*uscale*scaley,0])\n        a2\['translate'].setValue(\[0.5*uscale*scalex,rootAspect*-0.5*uscale*scaley,0])\n        a3\['translate'].setValue(\[0.5*uscale*scalex,rootAspect*0.5*uscale*scaley,0])\n        a4\['translate'].setValue(\[-0.5*uscale*scalex,rootAspect*0.5*uscale*scaley,0])\n        \n        aL = \[a1,a2,a3,a4]\n        \n        for a in aL:\n            a.setInput(0,aM)\n\n        # reconcile\n        r1 = nuke.nodes.Reconcile3D(name = 'r1', xpos = x, ypos = y+50)\n        r2 = nuke.nodes.Reconcile3D(name = 'r2', xpos = x, ypos = y+50)\n        r3 = nuke.nodes.Reconcile3D(name = 'r3', xpos = x, ypos = y+50)\n        r4 = nuke.nodes.Reconcile3D(name = 'r4', xpos = x, ypos = y+50)\n        \n        rL = \[r1,r2,r3,r4]\n        \n        for r in rL:\n            r.setInput(2,aL\[rL.index(r)])\n            r.setInput(1,cam)\n            r.setInput(0,bg)\n            \n        # run with threading\n        global stop_event \n        stop_event = threading.Event()\n        threading.Thread(target=execRC, kwargs=dict(first=first,last=last)).start() \n        while not stop_event.is_set():\n            time.sleep(0.1)\n\n        problem = 0\n        import math\n        timeline = \[\"beginning\",\"end\"]#######looping to fix stuff before and after ref frame\n        for side in timeline:##########################################################################################################: Fixing the curve###############################\n            if side == \"beginning\":\n                firstT = first\n                lastT = ref\n            if side == \"end\":\n                firstT = ref\n                lastT = last\n\n            for one in rL:########fixing stuff\n                curveXUp = 0\n                curveXDown = 0\n                curveYUp = 0\n                curveYDown = 0\n                fuckedFrames = \[]\n                k = one\[\"output\"]\n                valsx = \[];valSortx =\[]\n                valsy = \[];valSorty =\[]\n                for i in range(firstT,lastT+1):\n                    valsx.append(k.valueAt(i,0))\n                    valSortx.append(k.valueAt(i,0))\n                    valsy.append(k.valueAt(i,1))\n                    valSorty.append(k.valueAt(i,1))\n                valSortx.sort()\n                valSorty.sort()\n                minX = valSortx\[0]\n                maxX = valSortx\[-1]\n                minY = valSorty\[0]\n                maxY = valSorty\[-1]\n                if math.fabs(valsx.index(maxX)-valsx.index(minX)) == 1:\n                    problem = 1\n        if problem == 1:\n            if nuke.ask(\"Perspective problem detected! would you like to fix it? \\n your card did pass the Camera center, this causes the track to break, i will try to fix the problem. if my fix will not succeed you should use a bit smaller card so corners of the card will not cross the camera so fast.\"):\n                problem = 0\n                import math\n                timeline = \[\"beginning\",\"end\"]#######looping to fix stuff before and after ref frame\n                lastB = last\n                firstB = first\n                for side in timeline:##########################################################################################################: Fixing the curve###############################\n                    if side == \"beginning\":\n                        last = ref\n                    if side == \"end\":\n                        first = ref\n                        last = lastB\n\n                    for one in rL:########fixing stuff\n                        curveXUp = 0\n                        curveXDown = 0\n                        curveYUp = 0\n                        curveYDown = 0\n                        fuckedFrames = \[]\n                        k = one\[\"output\"]\n                        valsx = \[];valSortx =\[]\n                        valsy = \[];valSorty =\[]\n                        for i in range(first,last+1):\n                            valsx.append(k.valueAt(i,0))\n                            valSortx.append(k.valueAt(i,0))\n                            valsy.append(k.valueAt(i,1))\n                            valSorty.append(k.valueAt(i,1))\n                        valSortx.sort()\n                        valSorty.sort()\n                        minX = valSortx\[0]\n                        maxX = valSortx\[-1]\n                        minY = valSorty\[0]\n                        maxY = valSorty\[-1]\n                        if math.fabs(valsx.index(maxX)-valsx.index(minX)) == 1:\n                            problem = 1\n                            #print \"minX \",minX,\"maxX\",maxX,\"minY\",minY,\"maxY \",maxY\n                            #message = \"your card did pass the Camera center, this causes the track to break, i tried to fix the problem. if my fix did not succeed you should use a bit smaller card so corners of the card will not cross the camera so fast.\"\n                            if valsx.index(maxX)-valsx.index(minX) < 0:    ###############checking if the curve going up or down\n                                curveXUp = 1\n                            else:\n                                curveXDown = 1\n                            if valsy.index(maxY)-valsy.index(minY) < 0:    ###############checking if the curve going up or down\n                                curveYUp = 1\n                            else:\n                                curveYDown = 1\n                            if valsx.index(maxX)+first > ref:                                  ##### kill tail X\n                                if curveXDown == 1: ##### curve X is going down####################################################################################FIXEDforEnd\n                                    lastGoodX= k.valueAt(valsx.index(minX)+first,0)\n                                    prelastGoodX= k.valueAt(valsx.index(minX)+first-1,0)\n                                    diffX= abs(lastGoodX) - abs(prelastGoodX)\n                                    offsetX = abs(lastGoodX)+maxX+diffX*2\n                                    for i in range(valsx.index(maxX)+first,last+1):\n                                        val = k.valueAt(i)\[0]\n                                        k.setValueAt(val-offsetX,i,0)\n                                if curveXUp == 1: ##### curve X is going up####################################################################################FIXEDforEnd\n                                    #print \"up!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n                                    lastGoodX = k.valueAt(valsx.index(maxX)+first,0) \n                                    prelastGoodX= k.valueAt(valsx.index(maxX)+first-1,0) \n                                    diffX= abs(lastGoodX)- abs(prelastGoodX)\n                                    offsetX= maxX+abs(minX)+diffX*2\n                                    for i in range(valsx.index(minX)+first,last+1):\n                                        val = k.valueAt(i)\[0]\n                                        k.setValueAt(val+offsetX,i,0)\n                            if valsy.index(maxY)+first > ref:                                  ##### kill tail Y\n                                if curveYDown == 1: ##### curve Y is going down#####################################################################################FIXEDforEnd\n                                    lastGoodY= k.valueAt(valsy.index(minY)+first,1)\n                                    prelastGoodY= k.valueAt(valsy.index(minY)+first-1,1)\n                                    diffY= abs(lastGoodY) - abs(prelastGoodY) \n                                    offsetY = abs(lastGoodY)+maxY+diffY*2\n                                    for i in range(valsy.index(maxY)+first,last+1):\n                                        val = k.valueAt(i)\[1]\n                                        k.setValueAt(val-offsetY,i,1)\n                                if curveYUp == 1: ##### curve Y is going up####################################################################################FIXEDforEnd\n                                    lastGoodY = k.valueAt(valsy.index(maxY)+first,1) \n                                    prelastGoodY= k.valueAt(valsy.index(maxY)+first-1,1) \n                                    diffY=abs(lastGoodY) - abs(prelastGoodY) \n                                    offsetY= maxY+abs(minY)+diffY*2\n                                    for i in range(valsy.index(minY)+first,last+1):\n                                        val = k.valueAt(i)\[1]\n                                        k.setValueAt(val+offsetY,i,1)\n                            if valsx.index(maxX)+first < ref:                                  ##### kill head X-------------------------------------------------------------------------------------\n                                #print \"kill X head\"\n                                if curveXDown == 1: ##### curve X is going down#####################################################################################FIXEDforBeginning\n                                    firstGoodX= k.valueAt(valsx.index(maxX)+first,0)\n                                    prefirstGoodX= k.valueAt(valsx.index(maxX)+first+1,0)\n                                    diffX= abs(firstGoodX) - abs(prefirstGoodX) \n                                    offsetX = abs(firstGoodX)+abs(minX)+diffX*2\n                                    for i in range(first,valsx.index(maxX)+first):\n                                        val = k.valueAt(i)\[0]\n                                        k.setValueAt(val+offsetX,i,0)\n                                if curveXUp == 1: ##### curve X is going up#####################################################################################FIXEDforBeginning\n                                    firstGoodX = k.valueAt(valsx.index(minX)+first,0) \n                                    prefirstGoodX= k.valueAt(valsx.index(minX)+first+1,0) \n                                    diffX= abs(firstGoodX) - abs(prefirstGoodX) \n                                    offsetX= abs(firstGoodX)+maxX+diffX*2\n                                    for i in range(first,valsx.index(minX)+first):\n                                        val = k.valueAt(i)\[0]\n                                        k.setValueAt(val-offsetX,i,0)\n                            if valsy.index(maxY)+first < ref:                                  ##### kill head Y\n                                if curveYDown == 1: ##### curve Y is going down#####################################################################################FIXEDforBeginning\n                                    firstGoodY = k.valueAt(valsy.index(maxY)+first,1)\n                                    prefirstGoodY =  k.valueAt(valsy.index(maxY)+first+1,1)\n                                    diffY =  abs(firstGoodY) - abs(prefirstGoodY)\n                                    offsetY =  abs(firstGoodY)+abs(minY)+diffY*2\n                                    for i in range(first,valsy.index(maxY)+first):\n                                        val = k.valueAt(i)\[1]\n                                        k.setValueAt(val+offsetY,i,1)\n                                    #print  \"y down\"\n                                if curveYUp == 1: ##### curve Y is going up#####################################################################################FIXEDforBeginning\n                                    firstGoodY = k.valueAt(valsy.index(minY)+first,1)\n                                    prefirstGoodY = k.valueAt(valsy.index(minY)+first+1,1)\n                                    diffY = abs(firstGoodY) - abs(prefirstGoodY)\n                                    offsetY = abs(firstGoodY)+maxY+diffY*2\n                                    for i in range(first,valsy.index(minY)+first):\n                                        val = k.valueAt(i)\[1]\n                                        k.setValueAt(val-offsetY,i,1)\n\n                last = lastB\n                first = firstB\n            else:\n                pass\n\n        # corner pin normal\n        try :\n            cp = nuke.nodes.CProject(xpos = x+110, ypos = y)\n            cp\['camera'].setValue(cam.name())\n            cp\['translate'].setValue(card\['translate'].value())\n            cp\['rotation'].setValue(card\['rotate'].value())\n            cp\['element'].setValue(label)\n            cp.setName(cp\['name'].value().replace('CProject','CP')+\"_\"+label)\n            cp\['refFrame'].setValue(str(ref))\n        except:\n            cp = nuke.nodes.CornerPin2D(label = label +' ('+str(ref)+')', xpos = x+110, ypos = y)  \n        cp\['to1'].copyAnimations(r1\['output'].animations())\n        cp\['to2'].copyAnimations(r2\['output'].animations())\n        cp\['to3'].copyAnimations(r3\['output'].animations())\n        cp\['to4'].copyAnimations(r4\['output'].animations())\n        cp\['from1'].setValue(r1\['output'].getValueAt(ref))\n        cp\['from2'].setValue(r2\['output'].getValueAt(ref))\n        cp\['from3'].setValue(r3\['output'].getValueAt(ref))\n        cp\['from4'].setValue(r4\['output'].getValueAt(ref))\n\n\n        # corner pin matrix & roto \n        cpm = nuke.nodes.CornerPin2D(label = label+' matrix ('+str(ref)+')', xpos = x+220, ypos = y)   \n        roto = nuke.nodes.Roto( xpos = x+330, ypos = y) \n        roto.setName(roto\['name'].value().replace('Roto','R')+\"_\"+label)\n        nuke.show(roto)\n        \n        roto_transform = roto\['curves'].rootLayer.getTransform() # transform of root layer in roto\n        cpm\['transform_matrix'].setAnimated()\n        projectionMatrixTo = nuke.math.Matrix4()\n        projectionMatrixFrom = nuke.math.Matrix4()\n\n        frame = first\n        while frame<last+1:\n\n            to1x = cp\['to1'].valueAt(frame)\[0]\n            to1y = cp\['to1'].valueAt(frame)\[1]\n            to2x = cp\['to2'].valueAt(frame)\[0]\n            to2y = cp\['to2'].valueAt(frame)\[1]\n            to3x = cp\['to3'].valueAt(frame)\[0]\n            to3y = cp\['to3'].valueAt(frame)\[1]\n            to4x = cp\['to4'].valueAt(frame)\[0]\n            to4y = cp\['to4'].valueAt(frame)\[1]\n\n            from1x = cp\['from1'].valueAt(frame)\[0]\n            from1y = cp\['from1'].valueAt(frame)\[1]\n            from2x = cp\['from2'].valueAt(frame)\[0]\n            from2y = cp\['from2'].valueAt(frame)\[1]\n            from3x = cp\['from3'].valueAt(frame)\[0]\n            from3y = cp\['from3'].valueAt(frame)\[1]\n            from4x = cp\['from4'].valueAt(frame)\[0]\n            from4y = cp\['from4'].valueAt(frame)\[1]\n        \n            projectionMatrixTo.mapUnitSquareToQuad(to1x,to1y,to2x,to2y,to3x,to3y,to4x,to4y)\n            projectionMatrixFrom.mapUnitSquareToQuad(from1x,from1y,from2x,from2y,from3x,from3y,from4x,from4y)\n            theCornerpinAsMatrix = projectionMatrixTo*projectionMatrixFrom.inverse()\n            theCornerpinAsMatrix.transpose()\n\n            for i in range(0,16):\n                cpm\['transform_matrix'].setValueAt(theCornerpinAsMatrix\[i],frame,i)\n                \n            for i in range(0,16):\n                roto_transform.getExtraMatrixAnimCurve(0,i).addKey(frame,cpm\['transform_matrix'].getValueAt(frame,i))  \n                \n            frame = frame + 1\n\n        roto\['curves'].changed()\n\n        # check for turnover\n        k = cp\['to1']\n        vals = \[]\n        valSort =\[]\n        for i in range(first,last+1):\n            vals.append(k.valueAt(i,0))\n            valSort.append(k.valueAt(i,0))\n        valSort.sort()\n        min = valSort\[0]\n        max = valSort\[-1]\n        # warning = ''\n        # if math.fabs(vals.index(max)-vals.index(min)) == 1:\n        #     warning = 'Warning: perspective problem detected'\n\n\n        #clean up\n        rmL = \[r1,r2,r3,r4,a1,a2,a3,a4,aM,bg]\n        for i in rmL:\n            nuke.delete(i)\n        #nuke.delete(bg)\n        if axisCase ==1:\n            C2Tgroup.setInput(2,axisNode)\n            card\['label'].setValue(label)\n        elif axisCase == 2:#card case\n            C2Tgroup.setInput(2,None)\n            card.setInput(0,None)\n        card\['label'].setValue(label)\n            \n        \n        if dialog == False:\n            roto.setXYpos(x+100,y)\n            #remove all non roto nodes\n            nuke.delete(cp)\n            nuke.delete(cpm)\n            \n            \n        # show warning if any\n        # if warning != '':\n        #     nuke.message(warning)\n\n        print 'C2T done.!!!!!'\n        # if problem == 1:\n        #     nuke.message(message)\n\n    C2T(True)\n\n\n\n" +STARTLINE}
addUserKnob {26 w l "" -STARTLINE T or}
addUserKnob {22 Card l "Create object only" t "create 3d object in extracted position\nwithout animation" -STARTLINE T "\n\na=nuke.thisGroup()\n\nt = a\['translate'].value()\nr = a\['rotate'].value()\ns = a\['scaling'].value()\nu = a\['uniform_scale'].value()\na.end()\n\npanel = nuke.Panel(\"object\")\n\npanel.addSingleLineInput(\"Object Name:\",\"\")\npanel.addEnumerationPulldown(\"objects:\", \"Card Axis Cube Sphere Cylinder Light TransformGeo Camera\")\n\nif panel.show(): \n    ob = panel.value(\"objects:\")\n    name = panel.value(\"Object Name:\")\n    obj = nuke.createNode(ob)\n    \n    x = a\['xpos'].value()\n    y = a\['ypos'].value()\n    \n    obj.setInput(0,None)\n    obj\['xpos'].setValue(int(x))\n    obj\['ypos'].setValue(int(y+100))\n    obj\['translate'].setValue(t)\n    obj\['rotate'].setValue(r)\n    obj\['scaling'].setValue(s)\n    obj\['uniform_scale'].setValue(u)\n    obj.setName(name)\n    \n\n\n\n\n\n\n\n"}
addUserKnob {20 endGroup_2 l endGroup n -1}
addUserKnob {26 ""}
addUserKnob {26 credit l " &copy;" T "Helge Stang & Alexey Kuchinski"}
addUserKnob {20 help_1 l Help}
addUserKnob {26 hhelp l "" +STARTLINE T "---------------------------------------------------\nStep 1\n\nplease find some feature on the screen, feature you can see on the other frames as well.\nnow position the picker on this feature and press \"Set\" button\n\nthe reference frame is set, yo should see now the grid centering on the \"picker\"\n\nthere is a chance that \"grid\" will be very small or very big depends on the size of your scene, feel free to adjust it's size with the u_scale knob.\n\nnow you ready for the next step\n\n---------------------------------------------------\nStep 2\n\nLet's find exact position in 3d space\n\nstart advance few frames, you should see that a grid is not fixed anymore to your reference feature, from the moment you noticing it is happening adjust \"Z\" knob to bring the \"grid\" back to the place it was. already after first adjustment you will see that grid is sticking well to the feature. Now you can go to some other frame and refine the position again if needed\n\nTipp:\nit is possible that already after one or two frames of advancement your grid will disappear it can happen because of the size of your scene. just play with \"Z\" slider till you will bring the \"grid\" back to the screen. it is possible that you will have to go to negative \nvalues as well.\n\n---------------------------------------------------\nStep 3\n\nthis will create an axis in exact 3D position you found\nplease adjust (if needed)\nrotation of the card to match exact perspective you want\n\nTipp :\nadjusting \"scale\" and \"u_scale\":\nbe carefull when scaling up the card!!! from the moment one of the corners of the \"grid\" is passing the origin of the Camera the calculation will fail. So as a good practice leave your \"grid\" not too big it will not matter for final calculation since it still will lay on the same plane.\n\n\n---------------------------------------------------\nStep 4\n\nButton \"Go\"  will create for you few nodes\n\n1. CProject - basically it is a cornerPin node with steroids it allowes to you very easy set Reference point for your \"projection\", stabilize, crop. all in one\n2. CornerPin with a transformation baked in the \"matrix\" knob - usually i am using it to copy to GridWarp or SplineWarp\n3. Roto - the node i am using the most.\nthe transformation is baked into the root matrix.\nso just pick the frame create the rotoshape and enjoy!\n"}
addUserKnob {26 credits l "" +STARTLINE T "CardToTrack  v4.0  ||  by Alexey Kuchinski  |  lamakaha@gmail.com  |  7/2017"}
}
BackdropNode {
inputs 0
name BackdropNode1
tile_color 0x546b3d01
note_font "Helvetica bold Bold Bold Bold Bold Bold Bold Bold Bold"
note_font_size 100
xpos -1719
ypos 497
bookmark false
bdwidth 287
bdheight 334
}
Input {
inputs 0
name Extra
xpos -1449
ypos -791
number 2
}
Dot {
name Dot24
xpos -1415
ypos 65
}
set N2ae7a1e0 [stack 0]
Dot {
name Dot25
xpos -1675
ypos 65
}
DeepExpression {
chans0 rgb
chans1 none
rgba.red "( ( x/\[value input.width] ) - 0.5 ) * \[value hratio] * deep.front )"
rgba.green "( ( y/\[value input.height] ) - 0.5 ) * ( ( \[value hratio]*deep.front ) / ( \[value input.width]/\[value input.height] ) )"
rgba.blue -deep.front
name DeepExpression6
label "initial setup"
xpos -1709
ypos 607
addUserKnob {20 User}
addUserKnob {7 hratio}
hratio {{"\[value cam_data.haperture] / \[value cam_data.focal]"}}
}
DeepExpression {
chans0 {rgba.red rgba.green rgba.blue none}
chans1 none
rgba.red "(r * \[value cam_data.world_matrix.0] + g * \[value cam_data.world_matrix.1] + b * \[value cam_data.world_matrix.2]) + \[value cam_data.world_matrix.3]"
rgba.green "(r * \[value cam_data.world_matrix.4] + g * \[value cam_data.world_matrix.5] + b * \[value cam_data.world_matrix.6]) + \[value cam_data.world_matrix.7]"
rgba.blue "(r * \[value cam_data.world_matrix.8] + g * \[value cam_data.world_matrix.9] + b * \[value cam_data.world_matrix.10]) + \[value cam_data.world_matrix.11]"
name deepCT_00
label camera
xpos -1709
ypos 692
addUserKnob {20 User}
}
DeepToImage {
name DeepToImage3
xpos -1709
ypos 756
}
Dot {
name Dot26
xpos -1675
ypos 1840
}
push $N2ae7a1e0
Dot {
name Dot11
xpos -1415
ypos 566
}
set N2af02800 [stack 0]
Dot {
name Dot12
xpos -1415
ypos 725
}
set N2aee1d90 [stack 0]
Dot {
name Dot9
xpos -1415
ypos 1731
}
Input {
inputs 0
name Camera
xpos -624
ypos 760
number 1
}
set N2ae7fc90 [stack 0]
push $N2af02800
Axis {
inputs 0
translate {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].translate.0]\}]" x1112 -519.8007202} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].translate.1]\}]" x1112 197.4966736} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].translate.2]\}]" x1112 -128.6857147}}
rotate {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].rotate.0]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].rotate.1]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].rotate.2]\}]"}}
name Axis1
xpos -806
ypos 42
}
ColorBars {
inputs 0
name ColorBars1
xpos -976
ypos -130
}
Card2 {
rows 4
columns 4
z 10
lens_in_focal {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].focal]\}]"}}
lens_in_haperture {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].haperture]\}]"}}
control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
name Card2
xpos -976
ypos -2
addUserKnob {20 User}
addUserKnob {22 "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_1" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_1" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_1 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_2" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_2" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_2 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_3" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_3" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_3 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_4" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_4" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_4 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_5" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_5" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_5 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_6" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_6" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_6 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_7" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_7" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_7 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_8" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_8" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_8 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_9" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_9" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_9 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_10" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_10" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_10 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_11" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_11" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_11 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_12" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_12" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_12 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_13" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_13" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_13 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_14" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_14" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_14 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_15" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_15" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_15 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_16" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_16" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_16 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_17" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_17" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_17 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_18" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_18" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_18 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
}
TransformGeo {
inputs 2
name TransformGeo2
xpos -976
ypos 60
}
Switch {
inputs 2
which {{parent.extraHelper==1?1:0}}
name GeoInput
xpos -976
ypos 563
}
Input {
inputs 0
name BG
xpos 800
ypos -858
}
Dot {
name Dot4
xpos 834
ypos -788
}
set N2b13cb10 [stack 0]
Dot {
name Dot5
xpos -1122
ypos -788
}
Dot {
name Dot6
xpos -1119
ypos 911
}
ScanlineRender {
inputs 3
motion_vectors_type distance
output_shader_vectors true
P_channel rgb
name ScanlineRender2
xpos -976
ypos 908
}
Switch {
inputs 2
which {{parent.extraHelper==2?1:0}}
name WpasRender
xpos -976
ypos 1728
}
Switch {
inputs 2
which {{parent.extraHelper==5?1:0}}
name deepInput
note_font_size 14
xpos -976
ypos 1836
}
NoOp {
name NoOp1
tile_color 0xffff
gl_color 0xffff
xpos -976
ypos 2323
addUserKnob {20 User}
addUserKnob {22 pick T "a=nuke.toNode(\"NoOp1\")\nr=nuke.sample(a,\"red\",a\['picker'].value(0),a\['picker'].value(1),1,1)\ng=nuke.sample(a,\"green\",a\['picker'].value(0),a\['picker'].value(1),1,1)\nb=nuke.sample(a,\"blue\",a\['picker'].value(0),a\['picker'].value(1),1,1)\n#nuke.tprint(r)\nnuke.toNode('look_at_Axis')\['translate'].setValue(\[r,g,b])" +STARTLINE}
addUserKnob {12 picker}
picker {254.8000031 754.2000122}
}
Clamp {
channels rgba
name Clamp1
xpos -125
ypos 2323
}
push $N2ae7fc90
FrameHold {
first_frame 1001
name StabFrameHold
xpos -624
ypos 1121
disable true
}
set N2b18b700 [stack 0]
push $N2ae7fc90
Axis {
name Axis3
xpos -500
ypos 818
}
Dot {
name Dot10
xpos -476
ypos 900
}
Card2 {
inputs 0
display wireframe
render_mode off
image_aspect false
rows 1
columns 1
uniform_scale 600
control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
name Card3
tile_color 0xff00ff
gl_color 0xff00ff
xpos -375
ypos 820
addUserKnob {20 User}
addUserKnob {22 "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_1" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_1" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_1 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_2" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_2" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_2 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_3" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_3" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_3 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_4" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_4" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_4 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_5" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_5" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_5 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_6" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_6" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_6 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_7" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_7" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_7 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_8" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_8" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_8 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_9" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_9" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_9 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_10" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_10" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_10 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_11" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_11" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_11 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_12" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_12" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_12 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_13" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_13" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_13 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_14" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_14" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_14 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_15" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_15" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_15 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_16" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_16" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_16 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_17" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_17" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_17 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_18" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_18" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_18 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
}
TransformGeo {
inputs 2
name TransformGeo3
tile_color 0xff00ff
gl_color 0xff00ff
xpos -375
ypos 897
}
Dot {
name Dot20
xpos -341
ypos 983
}
push $N2aee1d90
Constant {
inputs 0
format "512 512 0 0 512 512 1 square_512"
name Constant2
tile_color 0xff
xpos -232
ypos -638
postage_stamp false
}
set N2b1fe670 [stack 0]
Wireframe {
operation "see through"
line_width 1
line_color {1 0 0 1}
name Wireframe4
xpos -642
ypos -416
}
set N2b207d90 [stack 0]
Card2 {
display wireframe
image_aspect false
rows 1
columns 1
translate {0.5 -0.5 0}
uniform_scale 0.03
control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
name Card9
xpos -891
ypos -369
addUserKnob {20 User}
addUserKnob {22 "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_1" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_1" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_1 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_2" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_2" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_2 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_3" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_3" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_3 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_4" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_4" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_4 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_5" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_5" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_5 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_6" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_6" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_6 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_7" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_7" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_7 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_8" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_8" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_8 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_9" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_9" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_9 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_10" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_10" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_10 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_11" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_11" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_11 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_12" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_12" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_12 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_13" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_13" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_13 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_14" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_14" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_14 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_15" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_15" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_15 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_16" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_16" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_16 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_17" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_17" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_17 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_18" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_18" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_18 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
}
Dot {
name Dot19
xpos -857
ypos -260
}
push $N2b207d90
Card2 {
display wireframe
image_aspect false
rows 1
columns 1
translate {0.5 0.5 0}
uniform_scale 0.03
control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
name Card8
xpos -806
ypos -367
addUserKnob {20 User}
addUserKnob {22 "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_1" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_1" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_1 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_2" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_2" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_2 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_3" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_3" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_3 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_4" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_4" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_4 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_5" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_5" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_5 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_6" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_6" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_6 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_7" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_7" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_7 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_8" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_8" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_8 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_9" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_9" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_9 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_10" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_10" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_10 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_11" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_11" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_11 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_12" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_12" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_12 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_13" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_13" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_13 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_14" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_14" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_14 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_15" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_15" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_15 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_16" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_16" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_16 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_17" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_17" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_17 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_18" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_18" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_18 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
}
Dot {
name Dot18
xpos -772
ypos -286
}
push $N2b207d90
Card2 {
display wireframe
image_aspect false
rows 1
columns 1
translate {-0.5 -0.5 0}
uniform_scale 0.03
control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
name Card7
xpos -724
ypos -367
addUserKnob {20 User}
addUserKnob {22 "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_1" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_1" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_1 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_2" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_2" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_2 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_3" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_3" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_3 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_4" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_4" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_4 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_5" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_5" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_5 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_6" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_6" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_6 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_7" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_7" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_7 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_8" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_8" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_8 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_9" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_9" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_9 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_10" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_10" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_10 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_11" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_11" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_11 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_12" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_12" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_12 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_13" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_13" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_13 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_14" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_14" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_14 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_15" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_15" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_15 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_16" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_16" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_16 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_17" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_17" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_17 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_18" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_18" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_18 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
}
Dot {
name Dot17
xpos -690
ypos -312
}
push $N2b207d90
Card2 {
display wireframe
image_aspect false
rows 1
columns 1
translate {-0.5 0.5 0}
uniform_scale 0.03
control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
name Card6
xpos -642
ypos -373
addUserKnob {20 User}
addUserKnob {22 "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_1" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_1" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_1 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_2" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_2" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_2 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_3" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_3" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_3 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_4" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_4" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_4 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_5" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_5" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_5 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_6" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_6" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_6 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_7" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_7" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_7 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_8" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_8" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_8 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_9" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_9" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_9 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_10" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_10" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_10 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_11" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_11" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_11 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_12" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_12" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_12 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_13" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_13" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_13 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_14" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_14" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_14 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_15" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_15" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_15 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_16" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_16" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_16 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_17" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_17" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_17 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_18" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_18" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_18 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
}
MergeGeo {
inputs 2
selectable false
name MergeGeo5
xpos -642
ypos -316
}
MergeGeo {
inputs 2
selectable false
name MergeGeo6
xpos -642
ypos -290
}
MergeGeo {
inputs 2
selectable false
name MergeGeo7
xpos -642
ypos -264
}
Dot {
name Dot16
xpos -608
ypos -187
}
push $N2b1fe670
Wireframe {
operation "see through"
line_width 1
line_color {0 1 0 1}
name Wireframe5
xpos -495
ypos -441
}
Card2 {
display wireframe
cast_shadow false
receive_shadow false
image_aspect false
rows 2
columns 2
uniform_scale 100
control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
name Card5
xpos -495
ypos -371
addUserKnob {20 User}
addUserKnob {22 "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_1" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_1" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_1 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_2" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_2" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_2 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_3" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_3" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_3 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_4" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_4" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_4 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_5" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_5" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_5 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_6" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_6" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_6 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_7" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_7" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_7 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_8" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_8" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_8 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_9" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_9" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_9 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_10" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_10" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_10 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_11" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_11" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_11 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_12" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_12" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_12 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_13" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_13" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_13 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_14" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_14" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_14 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_15" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_15" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_15 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_16" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_16" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_16 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_17" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_17" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_17 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_18" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_18" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_18 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
}
Dot {
name Dot15
xpos -461
ypos -307
}
push $N2b1fe670
Wireframe {
operation "see through"
line_width 1
line_color {1 0 1 1}
name Wireframe3
xpos -352
ypos -421
}
Card2 {
display wireframe
rows 2
columns 2
translate {0 0 -0.0001}
uniform_scale 0.1
control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
name Card4
xpos -352
ypos -379
addUserKnob {20 User}
addUserKnob {22 "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_1" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_1" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_1 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_2" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_2" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_2 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_3" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_3" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_3 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_4" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_4" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_4 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_5" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_5" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_5 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_6" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_6" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_6 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_7" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_7" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_7 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_8" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_8" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_8 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_9" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_9" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_9 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_10" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_10" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_10 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_11" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_11" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_11 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_12" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_12" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_12 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_13" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_13" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_13 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_14" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_14" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_14 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_15" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_15" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_15 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_16" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_16" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_16 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_17" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_17" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_17 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_18" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_18" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_18 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
}
Dot {
name Dot14
xpos -318
ypos -333
}
push $N2b1fe670
Wireframe {
operation "see through"
line_width 0.1
name Wireframe2
xpos -232
ypos -427
}
Card2 {
display wireframe
rows 4
columns 4
control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
name Card1
xpos -232
ypos -371
addUserKnob {20 User}
addUserKnob {22 "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_1" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_1" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_1 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_2" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_2" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_2 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_3" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_3" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_3 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_4" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_4" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_4 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_5" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_5" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_5 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_6" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_6" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_6 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_7" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_7" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_7 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_8" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_8" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_8 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_9" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_9" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_9 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_10" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_10" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_10 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_11" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_11" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_11 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_12" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_12" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_12 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_13" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_13" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_13 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_14" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_14" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_14 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_15" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_15" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_15 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_16" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_16" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_16 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_17" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_17" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_17 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_18" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_18" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_18 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
}
MergeGeo {
inputs 2
selectable false
name MergeGeo2
xpos -232
ypos -337
}
MergeGeo {
inputs 2
selectable false
name MergeGeo3
xpos -232
ypos -311
}
MergeGeo {
inputs 2
selectable false
name MergeGeo4
xpos -232
ypos -190
}
set N2b44cc20 [stack 0]
TransformGeo {
inputs 2
name TransformGeo5
xpos -706
ypos 722
}
Wireframe {
inputs 0
operation "see through"
line_width 2
name Wireframe1
xpos -713
ypos 433
}
set N2b469fa0 [stack 0]
push $N2aee1d90
ApplyMaterial {
inputs 2
name ApplyMaterial2
xpos -585
ypos 669
}
push $N2b469fa0
push $N2aee1d90
ApplyMaterial {
inputs 2
name ApplyMaterial1
xpos -808
ypos 519
}
push 0
Switch {
inputs 2
which {{parent.extraHelper==1?1:0}}
name GeoInput1
xpos -470
ypos 640
}
Axis {
inputs 0
display off
selectable false
scaling {0 0 0}
uniform_scale 10
name Perspective
xpos -611
ypos 13
}
Axis {
inputs 0
translate {118.7531357 79.11032867 144.1426086}
rotate {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return degrees(atan((\[topnode input1].translate.y(ref)-translate.y)/sqrt(pow2(sqrt(pow2(\[topnode input1].translate.x(ref)-translate.x)+pow2(\[topnode input1].translate.z(ref)-translate.z))))))\}]        "} {"\[topnode input1].translate.x(ref)-translate.x >= 0 ? 270-degrees(atan((\[topnode input1].translate.z(ref)-translate.z)/(\[topnode input1].translate.x(ref)-translate.x))): -degrees(atan((\[topnode input1].translate.z(ref)-translate.z)/(\[topnode input1].translate.x(ref)-translate.x)))-270"} {"curve  "}}
name look_at_Axis
xpos -500
ypos -146
addUserKnob {20 User}
addUserKnob {3 ref}
ref {{parent.refFrame}}
}
Axis2 {
inputs 0
name Axis2
xpos -359
ypos -146
}
Switch {
inputs 2
which {{"\[exists parent.input1]"}}
name Switch2
label "\[value which]"
xpos -510
ypos -52
}
Axis {
display solid+wireframe
translate {0 0 {parent.Zfind}}
uniform_scale {{parent.Perspective.uniform_scale}}
name Z_finder
xpos -497
ypos 14
}
Switch {
inputs 2
name Switch
label "\[value which]"
xpos -507
ypos 127
}
Dot {
name Dot1
xpos -473
ypos 222
}
set N2b4e2520 [stack 0]
push $N2b44cc20
push 0
Switch {
inputs 2
which 1
name Switch1
label "\[value which]"
xpos -232
ypos 138
}
TransformGeo {
inputs 2
name TransformGeo1
xpos -232
ypos 219
}
MergeGeo {
inputs 2
selectable false
name MergeGeo1
xpos -231
ypos 640
}
Switch {
inputs 3
which {{parent.extraHelper==3?1:parent.extraHelper==4?2:0}}
name AnimCard
xpos -231
ypos 722
}
MergeGeo {
inputs 2
selectable false
name MergeGeo8
xpos -231
ypos 979
}
push $N2b18b700
push $N2b4e2520
Dot {
name Dot8
xpos -470
ypos 583
}
push $N2ae7fc90
push $N2b13cb10
Dot {
name Dot21
xpos 834
ypos 764
}
set N2b5241a0 [stack 0]
Project3D {
inputs 2
crop false
name Project3D1
xpos 550
ypos 760
}
Card2 {
display wireframe
rows 4
columns 4
uniform_scale 100000
control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
name Card10
xpos 554
ypos 950
addUserKnob {20 User}
addUserKnob {22 "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_1" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_1" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_1 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_2" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_2" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_2 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_3" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_3" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_3 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_4" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_4" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_4 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_5" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_5" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_5 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_6" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_6" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_6 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_7" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_7" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_7 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_8" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_8" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_8 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_9" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_9" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_9 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_10" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_10" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_10 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_11" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_11" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_11 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_12" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_12" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_12 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_13" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_13" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_13 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_14" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_14" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_14 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_15" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_15" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_15 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_16" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_16" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_16 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_17" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_17" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_17 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
addUserKnob {22 "floor Pivot_18" l "floor Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[0,0.5,0])\nn\['pivot'].setValue(\[0,-0.5,0])"}
addUserKnob {22 "corner Pivot_18" l "corner Pivot" -STARTLINE T "n=nuke.thisNode()\nn\['translate'].setValue(\[-.5,.5,0])\nn\['pivot'].setValue(\[.5,-.5,0])"}
addUserKnob {22 snapToSelected_18 l snapToSelected -STARTLINE T "b=nuke.selectedNode()\['translate'].value()\nn=nuke.thisNode()\nn\['translate'].setValue(b)"}
}
TransformGeo {
inputs 2
name TransformGeo4
xpos 554
ypos 993
}
push $N2b5241a0
Dot {
name Dot22
xpos 834
ypos 1035
}
set N2b585fb0 [stack 0]
Remove {
name Remove2
xpos 653
ypos 1025
}
ScanlineRender {
inputs 3
shutter 0
motion_vectors_type distance
name ScanlineRender3
xpos 554
ypos 1127
}
push $N2b585fb0
Switch {
inputs 2
which 1
name StabSwitch
label "\[value which]"
xpos 800
ypos 1121
disable true
}
Dot {
name Dot2
xpos 834
ypos 1510
}
Dot {
name Dot3
xpos 834
ypos 1582
}
set N2b5bc690 [stack 0]
Remove {
name Remove1
xpos 154
ypos 1578
}
ScanlineRender {
inputs 3
shutter 0
motion_vectors_type distance
name ScanlineRender1
xpos -235
ypos 1584
}
HueShift {
name HueShift1
xpos -235
ypos 1702
}
Multiply {
channels rgba
value {{parent.op}}
name Multiply1
xpos -235
ypos 1728
}
push $N2b5bc690
Merge2 {
inputs 2
name Merge2
xpos 113
ypos 1809
}
Dot {
name Dot7
xpos 147
ypos 1882
}
Merge2 {
inputs 2
mix 0.001
name Merge1
xpos 113
ypos 2323
}
Output {
name Output1
xpos 113
ypos 2523
}
StickyNote {
inputs 0
name StickyNote1
tile_color 0xffffffff
label "<b>Mark Joey Tang Deep2VP                ."
note_font "Helvetica bold Bold Bold Bold Bold Bold Bold Bold Bold"
note_font_size 20
xpos -1719
ypos 459
}
Camera {
inputs 0
display off
selectable false
xform_order {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].cam_xform_order]\}]"}}
rot_order {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].cam_rot_order]\}]"}}
useMatrix true
matrix {
    {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.0]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.1]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.2]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.3]\}]"}}
    {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.4]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.5]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.6]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.7]\}]"}}
    {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.8]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.9]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.10]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.11]\}]"}}
    {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.12]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.13]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.14]\}]"} {"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].world_matrix.15]\}]"}}
  }
focal {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].focal]\}]"}}
haperture {{"\[if \{\[exists parent.input1] == 0\} \{return 0\} else \{return \[value \[topnode this.parent.input1].haperture]\}]"}}
name cam_data
xpos -1558
ypos 598
}
end_group
EdgeRoughen {
name EdgeRoughen1
selected true
xpos -1179
ypos -721
}
ChromAbb {
name ChromAbb1
selected true
xpos -1179
ypos -697
center_position {{width/2} {height/2}}
from0 none
}
P_Matte {
name P_Matte1
selected true
xpos -1179
ypos -673
in rgb
output alpha
}
Luma_to_Normals {
name Luma_to_Normals
selected true
xpos -1179
ypos -637
}
Group {
inputs 0
name STMap_Generator
selected true
xpos -1294
ypos -785
postage_stamp true
addUserKnob {20 STMap l "ST Map"}
addUserKnob {41 format l Format T Reformat1.format}
addUserKnob {26 ""}
addUserKnob {7 overscan l "Overscan (%)" t "Add overscan to your ST map" R 0 100}
overscan 10
addUserKnob {6 reformat l "Reformat to Overscan" t "Reformats the image to overscan size" +STARTLINE}
addUserKnob {26 ""}
addUserKnob {26 copyright l "" +STARTLINE T "v1.2 - Part of VectorTools"}
}
Reformat {
inputs 0
name Reformat1
xpos 555
ypos 395
}
Crop {
box {{-width*(parent.overscan/100)/2} {-height*(parent.overscan/100)/2} {width+(width*(parent.overscan/100)/2)} {height+(height*(parent.overscan/100)/2)}}
reformat {{parent.reformat}}
crop false
name Crop1
xpos 555
ypos 446
}
Expression {
expr0 (x+0.5)/width
expr1 (y+.5)/height
name Expression1
xpos 555
ypos 497
}
Output {
name Output1
xpos 555
ypos 583
}
end_group
push $cut_paste_input
Group {
name UV_Map_Layer
help "Generates a blank UV/ST map on a specific layer."
selected true
xpos -1294
ypos -678
addUserKnob {20 UVMap l "UV Map"}
addUserKnob {41 out l UV_Layer t "Pick the layer in which you'd like your motion vectors." T ShuffleCopy1.out}
addUserKnob {26 ""}
addUserKnob {26 copyright l "" t www.erwanleroy.com +STARTLINE T "v1.0 - Part of VectorTools by Erwan Leroy - 2016"}
}
Input {
inputs 0
name Input
xpos 555
ypos 346
}
set N2c1ccf10 [stack 0]
Expression {
expr0 (x+0.5)/width
channel1 {-rgba.red rgba.green -rgba.blue none}
expr1 (y+.5)/height
channel2 {-rgba.red -rgba.green rgba.blue none}
name Expression1
xpos 672
ypos 424
}
push $N2c1ccf10
ShuffleCopy {
inputs 2
in2 none
red red
green green
alpha black
out motion
name ShuffleCopy1
xpos 555
ypos 427
}
Output {
name Output1
xpos 555
ypos 511
}
end_group
Group {
name UV_to_Vectors
help "Transforms a distorted UV Map to Motion Vectors corresponding to the distortion."
selected true
xpos -1294
ypos -654
addUserKnob {20 UV_to_Vectors}
addUserKnob {41 in l UV_Layer t "Select the layer containing your UV_map" T UV_Channel.in}
addUserKnob {26 ""}
addUserKnob {26 copyright l "" t www.erwanleroy.com +STARTLINE T "v1.0 - Part of VectorTools by Erwan Leroy - 2016"}
}
Input {
inputs 0
name Input
xpos -291
ypos -63
}
set N2d347bb0 [stack 0]
Shuffle {
name UV_Channel
xpos -151
ypos -17
}
Expression {
expr0 -x+r*width-0.5
expr1 -y+g*height-0.5
channel2 {-rgba.red -rgba.green -rgba.blue none}
channel3 {none none none -rgba.alpha}
name UV_to_Vectors1
xpos -151
ypos 97
}
push $N2d347bb0
ShuffleCopy {
inputs 2
in2 none
red red
green green
alpha black
out {{{parent.UV_Channel.in}}}
name ShuffleCopy1
xpos -291
ypos 97
}
Output {
name Output1
xpos -291
ypos 167
}
end_group
Group {
name Vectors_Create
help "Edit the direction of motion vectors"
selected true
xpos -1294
ypos -630
addUserKnob {20 VecCreate l "Vectors Create"}
addUserKnob {41 in l Direction_Layer t "Pick the layer containing your Direction." T Dir_Layer.in}
addUserKnob {4 direction_type l Direction_Type t "For Angle modes, only the R channel of the Direction Layer will be used." M {"Angle (Degrees) : 0 - 1" "Angle (Degrees) : 0 - 360" Vector "" ""}}
addUserKnob {41 magchan l "Magnitude Channel" T Mag.from0}
addUserKnob {26 ""}
addUserKnob {26 copyright l "" t www.erwanleroy.com +STARTLINE T "v1.0 - Part of VectorTools by Erwan Leroy - 2017"}
}
Input {
inputs 0
name Magnitude
xpos -452
ypos 93
number 1
}
Dot {
name Dot3
tile_color 0xcccccc00
xpos -418
ypos 280
}
Input {
inputs 0
name Direction
xpos -303
ypos 91
}
set N2d50bd30 [stack 0]
Remove {
name Remove1
xpos -303
ypos 188
}
Copy {
inputs 2
from0 rgba.red
to0 rgba.red
bbox B
name Mag
xpos -303
ypos 270
}
set N2d4e6e50 [stack 0]
Shuffle {
green red
blue red
alpha red
name Shuffle1
label "in \[value in]-->out \[value out]"
xpos -46
ypos 270
}
push $N2d50bd30
Shuffle {
name Dir_Layer
xpos -161
ypos 91
}
Dot {
name Dot1
tile_color 0x9e3c6300
xpos -127
ypos 157
}
set N2d5312a0 [stack 0]
Dot {
name Dot2
tile_color 0x9e3c6300
xpos 124
ypos 157
}
Expression {
temp_name0 mag
temp_expr0 sqrt(pow(r,2)+pow(g,2)+pow(b,2))
expr0 mag!=0?r/mag:0
expr1 mag!=0?g/mag:0
expr2 mag!=0?b/mag:0
name Normalize
xpos 90
ypos 206
}
Merge2 {
inputs 2
operation multiply
bbox B
name Merge1
xpos 90
ypos 276
}
Dot {
name Dot5
tile_color 0x4b5ec600
xpos 124
ypos 485
}
push $N2d5312a0
Multiply {
value 360
name Multiply1
xpos -161
ypos 216
disable {{parent.direction_type!=0}}
}
Dot {
name Dot4
tile_color 0x7aa9ff00
xpos -127
ypos 346
}
push $N2d4e6e50
Copy {
inputs 2
from0 rgba.red
to0 rgba.alpha
bbox B
name Copy2
xpos -303
ypos 336
}
Expression {
temp_name0 angleRad
temp_expr0 radians(a+180)
expr0 "r * sin(angleRad)"
expr1 "r * cos(angleRad) "
name Rotation
xpos -303
ypos 406
}
Switch {
inputs 2
which {{parent.direction_type==2}}
name Switch1
xpos -303
ypos 481
}
Output {
name Output1
xpos -303
ypos 542
}
end_group
Group {
name Vectors_Direction
help "Convert the vector's directions to a value in Degrees."
selected true
xpos -1294
ypos -606
addUserKnob {20 Dir l Direction}
addUserKnob {41 in l Vector_Layer t "Pick the layer containing your motion vectors." T UV_Channel.in}
addUserKnob {26 ""}
addUserKnob {6 flip_angle t "Flips the directions of the rotations" +STARTLINE}
addUserKnob {7 rotate R 0 360}
addUserKnob {26 ""}
addUserKnob {6 anisotropic t "The default anisotropic shader in Maya requires a value of 180 degrees in order to rotate the anisotropy by 90 degrees. Checking this box will multiply the values by 2." +STARTLINE}
addUserKnob {6 normalize_range t "Display the values in a range of 0-1 instead of 0-360" -STARTLINE}
normalize_range true
addUserKnob {26 ""}
addUserKnob {26 copyright l "" t www.erwanleroy.com +STARTLINE T "v1.0 - Part of VectorTools by Erwan Leroy - 2016"}
}
Input {
inputs 0
name Input
xpos -303
ypos 91
}
set N2c1afcc0 [stack 0]
Shuffle {
name UV_Channel
xpos -113
ypos 91
}
Expression {
channel0 rgb
expr0 degrees(atan(r,g))+180
name Vector_to_Degrees
xpos -113
ypos 145
}
Expression {
channel0 rgb
expr0 360-r
name Counter_clockwise
xpos -113
ypos 187
disable {{1-parent.flip_angle}}
}
Add {
value {{parent.rotate}}
name Rotate
xpos -113
ypos 224
}
Multiply {
value 2
name Multiply1
xpos -113
ypos 262
disable {{1-parent.anisotropic}}
}
Expression {
channel0 rgb
expr0 r%360
name Range360
xpos -113
ypos 317
}
Expression {
channel0 rgb
expr0 r/360
name Range_0_1
xpos -113
ypos 365
disable {{1-parent.normalize_range}}
}
push $N2c1afcc0
ShuffleCopy {
inputs 2
in2 none
red red
green green
blue blue
alpha black
out {{{parent.UV_Channel.in}}}
name ShuffleCopy1
xpos -303
ypos 365
}
Output {
name Output1
xpos -303
ypos 440
}
end_group
Group {
name Vectors_Magnitude
help "Displays the magnitude of vectors."
selected true
xpos -1294
ypos -582
addUserKnob {20 mag l Magnitude}
addUserKnob {41 in l Vector_Layer t "Pick the layer containing your motion vectors." T UV_Channel.in}
addUserKnob {26 ""}
addUserKnob {26 copyright l "" t www.erwanleroy.com +STARTLINE T "v1.0 - Part of VectorTools by Erwan Leroy - 2016"}
}
Input {
inputs 0
name Input
xpos -303
ypos 114
}
set N2d324040 [stack 0]
Shuffle {
name UV_Channel
xpos -163
ypos 114
}
Expression {
channel0 rgba
expr0 sqrt(pow(r,2)+pow(g,2)+pow(b,2))
channel2 {-rgba.red -rgba.green -rgba.blue none}
channel3 {none none none -rgba.alpha}
name Mag
xpos -163
ypos 228
}
push $N2d324040
ShuffleCopy {
inputs 2
in2 none
red red
green green
blue blue
alpha black
out {{{parent.UV_Channel.in}}}
name ShuffleCopy1
xpos -303
ypos 228
}
Output {
name Output1
xpos -303
ypos 299
}
end_group
Group {
name Vectors_Normalize
help "Scales the magnitude of all vectors to 1."
selected true
xpos -1294
ypos -558
addUserKnob {20 norm l Normalize}
addUserKnob {41 in l Vector_Layer t "Pick the layer containing your motion vectors." T UV_Channel.in}
addUserKnob {26 ""}
addUserKnob {26 copyright l "" t www.erwanleroy.com +STARTLINE T "v1.2 - Part of VectorTools by Erwan Leroy - 2016"}
}
Input {
inputs 0
name Input
xpos -303
ypos 114
}
set N2d5cea40 [stack 0]
Shuffle {
name UV_Channel
xpos -163
ypos 114
}
Expression {
temp_name0 mag
temp_expr0 sqrt(pow(r,2)+pow(g,2)+pow(b,2))
expr0 mag!=0?r/mag:0
expr1 mag!=0?g/mag:0
expr2 mag!=0?b/mag:0
name Normalize
xpos -163
ypos 228
}
push $N2d5cea40
ShuffleCopy {
inputs 2
in2 none
red red
green green
blue blue
alpha black
out {{{parent.UV_Channel.in}}}
name ShuffleCopy1
xpos -303
ypos 228
}
Output {
name Output1
xpos -303
ypos 299
}
end_group
Group {
name Vectors_Rotation
help "Edit the direction of motion vectors"
selected true
xpos -1294
ypos -534
addUserKnob {20 VecRot l "Vectors Rotation"}
addUserKnob {41 in l Vector_Layer t "Pick the layer containing your motion vectors." T UV_Channel.in}
addUserKnob {26 ""}
addUserKnob {6 shuffleXY l swapXY t "enable if it seems like X and Y vectors are in the wrong channel.\nRed should contain X\nGreen should contain Y" +STARTLINE}
addUserKnob {6 mirrorX t "negates X values" +STARTLINE}
addUserKnob {6 mirrorY t "Negates Y values" -STARTLINE}
addUserKnob {6 mirrorZ t "Negates Z values" -STARTLINE}
addUserKnob {26 ""}
addUserKnob {7 rotation t "Rotates the vectors direction" R 0 360}
addUserKnob {26 ""}
addUserKnob {26 copyright l "" t www.erwanleroy.com +STARTLINE T "v1.1 - Part of VectorTools by Erwan Leroy - 2016"}
}
Input {
inputs 0
name Input
xpos -303
ypos 91
}
set N2d2e34c0 [stack 0]
Shuffle {
name UV_Channel
xpos -163
ypos 91
}
Shuffle {
red green
green red
name Shuffle1
xpos -163
ypos 128
disable {{1-parent.shuffleXY}}
}
Multiply {
channels {rgba.red -rgba.green -rgba.blue none}
value -1
name neg_red1
xpos -163
ypos 165
disable {{1-parent.mirrorX}}
}
Multiply {
channels {-rgba.red rgba.green -rgba.blue none}
value -1
name neg_green1
xpos -163
ypos 191
disable {{1-parent.mirrorY}}
}
Multiply {
channels {-rgba.red rgba.green -rgba.blue none}
value -1
name neg_blue1
xpos -163
ypos 227
disable {{1-parent.mirrorZ}}
}
Expression {
temp_name0 angleRad
temp_expr0 radians(parent.rotation)
expr0 "r * cos(angleRad) - g * sin(angleRad)"
expr1 "r * sin(angleRad) + g * cos(angleRad)"
name Direction
xpos -163
ypos 273
}
push $N2d2e34c0
ShuffleCopy {
inputs 2
red red
green green
blue blue
out {{{parent.UV_Channel.in}}}
name ShuffleCopy1
xpos -303
ypos 273
}
Output {
name Output1
xpos -303
ypos 344
}
end_group
Group {
name Vectors_to_UV
selected true
xpos -1294
ypos -510
addUserKnob {20 VtoU l "Vectors to UV"}
addUserKnob {41 in l Vector_Layer t "Pick the layer containing your motion vectors." T UV_Channel.in}
addUserKnob {26 ""}
addUserKnob {26 copyright l "" t www.erwanleroy.com +STARTLINE T "v1.0 - Part of VectorTools by Erwan Leroy - 2016"}
}
Input {
inputs 0
name Input
xpos -303
ypos 114
}
set N2d6c9bc0 [stack 0]
Shuffle {
name UV_Channel
xpos -163
ypos 114
}
Expression {
expr0 (r+x+0.5)/width
expr1 (g+y+0.5)/height
channel2 {-rgba.red -rgba.green -rgba.blue none}
channel3 {none none none -rgba.alpha}
name Vectors_to_UV
xpos -163
ypos 228
}
push $N2d6c9bc0
ShuffleCopy {
inputs 2
in2 none
red red
green green
alpha black
out {{{parent.UV_Channel.in}}}
name ShuffleCopy1
xpos -303
ypos 228
}
Output {
name Output1
xpos -303
ypos 299
}
end_group
VectorTransform {
name VectorTransform
selected true
xpos -1294
ypos -486
shutteroffset centred
}
